<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>索修远のBlog</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-02T15:51:28.935Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>索修远</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>抵御XSS攻击</title>
    <link href="http://example.com/posts/20174efb.html"/>
    <id>http://example.com/posts/20174efb.html</id>
    <published>2024-08-02T15:00:36.000Z</published>
    <updated>2024-08-02T15:51:28.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抵御XSS攻击"><a href="#抵御XSS攻击" class="headerlink" title="抵御XSS攻击"></a>抵御XSS攻击</h1><p>​</p><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。<br>例如用户在发帖或者注册的时候，在文本框中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>，这段代码如果不经过转义处理，而直接保存到数据库。将来视图层渲染HTML的时候，把这段代码输出到页面上，那么<br>标签的内容就会被执行。<br>通常情况下，我们登陆到某个网站。如果网站使用HttpSession保存登陆凭证，那么SessionId会以Cookie的形式保存在浏览器上。如果黑客在这个网页发帖的时候，填写的JavaScript代码是用来获取Cookie内容的，并且把Cookie内容通过Ajax发送给黑客自己的电脑。于是只要有人在这个网站上浏览黑客发的帖子，那么视图层渲染HTML页面，就会执行注入的XSS脚本，于是你的Cookie信息就泄露了。黑客在自己的电脑上构建出Cookie，就可以冒充已经登陆的用户。即便很多网站使用了JWT，登陆凭证（Token令牌）是存储在浏览器上面的。所以用XSS脚本可以轻松的从Storage中提取出Token，黑客依然可以轻松的冒充已经登陆的用户。<br>所以避免XSS攻击最有效的办法就是对用户输入的数据进行转义，然后存储到数据库里面。等到视图层渲染HTML页面的时候。转义后的文字是不会被当做JavaScript执行的，这就可以抵御XSS攻击。</p><p>对HTTP请求中的数据进行转义 方法：</p><ul><li>设置过滤器</li><li>覆盖HTTP请求<ul><li>HTTPServletRequest是接口，各厂商会实现<ul><li>如果直接继承各厂商的请求父类子类覆盖方法，那么就会程序和厂商绑定在一起</li></ul></li><li>HTTPServletRequestWrapper类（包装类来增强请求功能）<ul><li>使用了装饰器模式</li><li>装饰器封装了厂商的request实现类</li><li>只需要覆盖Wrapper类的方法就能做到给请求对象增加新功能</li><li>创建一个过滤器，把请求对象传入wrapper中</li></ul></li></ul></li></ul><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="config包下加入配置类进行转义"><a href="#config包下加入配置类进行转义" class="headerlink" title="config包下加入配置类进行转义"></a>config包下加入配置类进行转义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class="line">    public XssHttpServletRequestWrapper(HttpServletRequest request) &#123;</span><br><span class="line">        super(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getParameter(String name) &#123;</span><br><span class="line">        String value = super.getParameter(name);</span><br><span class="line">        if (!StrUtil.hasEmpty(value))&#123;</span><br><span class="line">            value=HtmlUtil.filter(value);</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] values = super.getParameterValues(name);</span><br><span class="line">        if (values != null) &#123;</span><br><span class="line">            for (int i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">                String value = values[i];</span><br><span class="line">                if (!StrUtil.hasEmpty(value))&#123;</span><br><span class="line">                    value=HtmlUtil.filter(value);</span><br><span class="line">                &#125;</span><br><span class="line">                values[i]=value;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        return values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = super.getParameterMap();</span><br><span class="line"></span><br><span class="line">        LinkedHashMap map = new LinkedHashMap();</span><br><span class="line"></span><br><span class="line">        if (parameterMap != null) &#123;</span><br><span class="line">            for (String key : parameterMap.keySet()) &#123;</span><br><span class="line">                String[] values = parameterMap.get(key);</span><br><span class="line">                for (int i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">                    String value = values[i];</span><br><span class="line">                    if (!StrUtil.hasEmpty(value))&#123;</span><br><span class="line">                        value=HtmlUtil.filter(value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    values[i]=value;</span><br><span class="line">                &#125;</span><br><span class="line">                map.put(key, values);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String getHeader(String name) &#123;</span><br><span class="line">        String value = super.getHeader(name);</span><br><span class="line">        if (!StrUtil.hasEmpty(value))&#123;</span><br><span class="line">            value=HtmlUtil.filter(value);</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class="line">        InputStream in= super.getInputStream();</span><br><span class="line">        InputStreamReader reader=new InputStreamReader(in, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">        BufferedReader buffer=new BufferedReader(reader);</span><br><span class="line">        StringBuffer body=new StringBuffer();</span><br><span class="line">        String line=buffer.readLine();</span><br><span class="line">        while(line!=null)&#123;</span><br><span class="line">            body.append(line);</span><br><span class="line">            line=buffer.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        in.close();</span><br><span class="line">        Map&lt;String,Object&gt; map= JSONUtil.parseObj(body.toString());</span><br><span class="line">        Map&lt;String,Object&gt; result=new LinkedHashMap&lt;&gt;();</span><br><span class="line">        for(String key:map.keySet())&#123;</span><br><span class="line">            Object val=map.get(key);</span><br><span class="line">            if(val instanceof String)&#123;</span><br><span class="line">                if(!StrUtil.hasEmpty(val.toString()))&#123;</span><br><span class="line">                    result.put(key,HtmlUtil.filter(val.toString()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                result.put(key,val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String json=JSONUtil.toJsonStr(result);</span><br><span class="line">        ByteArrayInputStream bain=new ByteArrayInputStream(json.getBytes());</span><br><span class="line">        return new ServletInputStream() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int read() throws IOException &#123;</span><br><span class="line">                return bain.read();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean isFinished() &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean isReady() &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void setReadListener(ReadListener readListener) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><script>alert('这就是被xss攻击的展示')</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Swagger搭建RESTAPI</title>
    <link href="http://example.com/posts/b23a516a.html"/>
    <id>http://example.com/posts/b23a516a.html</id>
    <published>2024-08-02T12:52:02.000Z</published>
    <updated>2024-08-02T15:45:21.202Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240802210458.png"></p><p>集成JWT令牌后，之后调用web方法时，都需要带着令牌。那么就必须要去上传令牌字符串儿。那么就必须要告诉Swagger，提交的请求里边哪一个参数是上传的令牌字符串儿，</p><p>需要去创建一个list对象。在里边呢，这个泛型是ApiKEY这样类型的一个对象，那么这个对象里面封装的就是告诉给swagger请求里边哪一个参数是提交上来的令牌字符串儿。把这个对象呢放在list集合里边。对这个list集合再次做一下封装，封装成一个认证的数组，这个认证数组对象呢，还要再次经过这个封装，封装成一个reference对象。放到另外的一个list集合里边。这个list集合还要再次进行封装。封装成一个context上下文儿对象，然后封装到另外的一个list里边，那么这个最后的list才是我们要用到的list。</p><ul><li>导入依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>配置类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">package com.example.emos.wx.config;</span><br><span class="line"></span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.service.ApiKey;</span><br><span class="line">import springfox.documentation.service.AuthorizationScope;</span><br><span class="line">import springfox.documentation.service.SecurityReference;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line">import springfox.documentation.spring.web.plugins.ApiSelectorBuilder;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">// 配置Swagger文档生成的注解</span><br><span class="line">@Configuration</span><br><span class="line">// 启用Swagger2</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建RESTful API的Docket实例</span><br><span class="line">     *</span><br><span class="line">     * @return Docket实例</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">      Docket docket = new Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">        // 构建API信息</span><br><span class="line">        ApiInfoBuilder Builder = new ApiInfoBuilder();</span><br><span class="line">        Builder.title(&quot;api接口文档&quot;);</span><br><span class="line">        ApiInfo apiInfo = Builder.build();</span><br><span class="line">        docket.apiInfo(apiInfo);</span><br><span class="line"></span><br><span class="line">        // 选择API</span><br><span class="line">        ApiSelectorBuilder selectorBuilder = docket.select();</span><br><span class="line">        // 选择所有路径</span><br><span class="line">        selectorBuilder.paths(PathSelectors.any());</span><br><span class="line">        // 选择带有ApiOperation注解的方法</span><br><span class="line">        //使用@ApiOperation的方法会被提取到REST API中</span><br><span class="line">        selectorBuilder.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class));</span><br><span class="line">        docket = selectorBuilder.build();</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">      // 下面的语句是开启对JWT的支持，当用户用Swagger调用受JWT认证保护的方法，</span><br><span class="line">      //</span><br><span class="line">      //必须要先提交参数（例如令牌）</span><br><span class="line">      //</span><br><span class="line">      // */</span><br><span class="line">      //      存储用户必须提交的参数</span><br><span class="line">        ApiKey apiKey = new ApiKey(&quot;token&quot;, &quot;token&quot;, &quot;header&quot;);</span><br><span class="line">        List&lt;ApiKey&gt; apiKeyList = new ArrayList&lt;&gt;();</span><br><span class="line">      //规定用户需要输入什么参数</span><br><span class="line">        apiKeyList.add(apiKey);</span><br><span class="line">        docket.securitySchemes(apiKeyList);</span><br><span class="line"></span><br><span class="line">        // 设置授权范围</span><br><span class="line">        //如果用户JWT认证通过，则在Swagger中全局有效</span><br><span class="line">        AuthorizationScope scope = new AuthorizationScope(&quot;global&quot;, &quot;accessEverything&quot;);</span><br><span class="line">        AuthorizationScope[] scopes = &#123;scope&#125;;</span><br><span class="line">        //存储令牌和作用域</span><br><span class="line">        SecurityReference reference = new SecurityReference(&quot;token&quot;, scopes);</span><br><span class="line">        List refList = new ArrayList();</span><br><span class="line">        refList.add(reference);</span><br><span class="line">        // 设置安全上下文</span><br><span class="line">        SecurityContext context = SecurityContext.builder().securityReferences(refList).build();</span><br><span class="line">        List cxtList = new ArrayList();</span><br><span class="line">        cxtList.add(context);</span><br><span class="line">        docket.securityContexts(cxtList);</span><br><span class="line"></span><br><span class="line">      return docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/test&quot;)</span><br><span class="line">@Api(&quot;测试接口&quot;)</span><br><span class="line">public class testcontroller &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   @GetMapping(&quot;/sayHello&quot;)</span><br><span class="line">   @ApiOperation(&quot;测试接口&quot;)</span><br><span class="line">    public R sayHello()</span><br><span class="line">    &#123;</span><br><span class="line">        return R.ok().put(&quot;msg&quot;,&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设置静态IP</title>
    <link href="http://example.com/posts/8023e37.html"/>
    <id>http://example.com/posts/8023e37.html</id>
    <published>2024-08-02T09:56:52.000Z</published>
    <updated>2024-08-02T15:45:21.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>进入网卡所在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/</span><br></pre></td></tr></table></figure><p>备份网卡信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -rp /etc/sysconfig/network-scripts/ifcfg-enp0s3 /etc/sysconfig/network-scripts/ifcfg-enp0s3.bak</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line"></span><br><span class="line">IPADDR=&quot;172.21.208.200&quot;</span><br><span class="line">NETMASK=&quot;255.255.252.0&quot;</span><br><span class="line">GATEWAY=&quot;172.21.208.1&quot;</span><br><span class="line">DNS1=&quot;8.8.8.8&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;enp0s3&quot;</span><br><span class="line">UUID=&quot;22fcffef-ba52-450c-a3a2-422f744fe54d&quot;</span><br><span class="line">DEVICE=&quot;enp0s3&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开dos命令行, 输入ipconfig &#x2F;all 可以查看主机中的网络配置, 如下</p><p>换成自己的网段</p><p><img src="http://www.1330.cn/d/20211016/9630bfd831b53eb8b6660fdbed8151ed.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://example.com/posts/f8e09374.html"/>
    <id>http://example.com/posts/f8e09374.html</id>
    <published>2024-07-27T12:27:50.000Z</published>
    <updated>2024-08-02T15:45:21.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端框架" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>markdown文件编译</title>
    <link href="http://example.com/posts/d2475ec3.html"/>
    <id>http://example.com/posts/d2475ec3.html</id>
    <published>2024-07-18T07:59:32.000Z</published>
    <updated>2024-07-18T08:09:29.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="markdown文件编译"><a href="#markdown文件编译" class="headerlink" title="markdown文件编译"></a>markdown文件编译</h1><h2 id="标准开头"><a href="#标准开头" class="headerlink" title="标准开头"></a>标准开头</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">date: 时间</span><br><span class="line">tags: 标签</span><br><span class="line">categories: 分类</span><br><span class="line"></span><br><span class="line">记得冒号后加空格！！</span><br><span class="line"></span><br><span class="line">分类的例子：</span><br><span class="line">categories:</span><br><span class="line">- [学习,html]</span><br><span class="line">- [学习,http]</span><br><span class="line">效果如本博客所示</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h2><p>英文的&gt;是文章摘要，一个回车继续写，2个回车退出该次编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; +文章概要</span><br></pre></td></tr></table></figure><p>例如：</p><blockquote><p>文章摘要</p></blockquote><hr><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>-[]内容，在横岗后面加空格，在中括号中加空格。</p><p>例如</p><ul><li><input disabled="" type="checkbox"> </li></ul><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法一：~~内容~~</span><br><span class="line"> </span><br><span class="line">方法二：~~内容~   </span><br></pre></td></tr></table></figure><p>示例：</p><p><del>内容</del></p><hr><h2 id="划横线和代码块"><a href="#划横线和代码块" class="headerlink" title="划横线和代码块"></a>划横线和代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">划横线：---</span><br><span class="line">代码块：~~~</span><br></pre></td></tr></table></figure><h2 id="latex数学公式编辑器"><a href="#latex数学公式编辑器" class="headerlink" title="latex数学公式编辑器"></a>latex数学公式编辑器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">里面插入latex代码</span><br><span class="line">$$</span><br><span class="line">[在线latex工具](https://www.texpage.com/)</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>左对齐</p><blockquote><p>:———-</p></blockquote><p>右对齐</p><blockquote><p>———-:</p></blockquote><p>居中对齐</p><blockquote><p>:———-:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| 课程表 | 星期一  |  星期二  |  星期三  | 星期四  |  星期五  |</span><br><span class="line">| :----: | :-----: | :------: | :------: | :-----: | :------: |</span><br><span class="line">|  上午  |  Math   | Chinese  |  Music   |  Math   | Chinese  |</span><br><span class="line">|  下午  | Chinese |    PE    |   Math   | English | Computer |</span><br><span class="line">| 晚自习 | English | Computer | Computer |  Math   | Chinese  |</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">课程表</th><th align="center">星期一</th><th align="center">星期二</th><th align="center">星期三</th><th align="center">星期四</th><th align="center">星期五</th></tr></thead><tbody><tr><td align="center">上午</td><td align="center">Math</td><td align="center">Chinese</td><td align="center">Music</td><td align="center">Math</td><td align="center">Chinese</td></tr><tr><td align="center">下午</td><td align="center">Chinese</td><td align="center">PE</td><td align="center">Math</td><td align="center">English</td><td align="center">Computer</td></tr><tr><td align="center">晚自习</td><td align="center">English</td><td align="center">Computer</td><td align="center">Computer</td><td align="center">Math</td><td align="center">Chinese</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jmeter</title>
    <link href="http://example.com/posts/808e762c.html"/>
    <id>http://example.com/posts/808e762c.html</id>
    <published>2024-07-18T07:54:50.000Z</published>
    <updated>2024-07-18T17:38:51.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h1><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">缺点：</span><br><span class="line">1. 不支持IP欺骗</span><br><span class="line">2. 使用JMeter无法验证JS程序，也无法验证页面UI，所以要和Selenium配合来完成Web2.0应用的测试</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/20240718173655.png"></p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718173741.png"></p><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>进 程: 正在运行的程序<br>线 程: 是进程中的执行线索<br>线程组: 进程中有许多线程，为了方便管理，可以对线程按照性质分组，分组的结果就是线程组</p><p>三者关系，一个进程可以包含多个线程组，一个线程组可以包含多个线程</p><h2 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h2><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718173816.png"></p><h2 id="jmeter里俩个特殊的线程组"><a href="#jmeter里俩个特殊的线程组" class="headerlink" title="jmeter里俩个特殊的线程组"></a>jmeter里俩个特殊的线程组</h2><ul><li>setUp线程组：最优先执行的线程组</li><li>tearDown线程组：最后执行的线程组</li></ul><h2 id="线程组常用属性"><a href="#线程组常用属性" class="headerlink" title="线程组常用属性"></a>线程组常用属性</h2><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter20240718173027.png"></p><ul><li>线程数：模拟的用户个数</li><li>ramp：程序的准备时间</li><li>循环次数：每个线程执行的次数</li></ul><h2 id="http请求默认值"><a href="#http请求默认值" class="headerlink" title="http请求默认值"></a>http请求默认值</h2><p>http请求默认值：被复用的内容的封装</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718174618.png"></p><h2 id="信息头管理器"><a href="#信息头管理器" class="headerlink" title="信息头管理器"></a>信息头管理器</h2><p>新增修改实现时提交的数据是 JSON 格式的，需声明提交的数据的内容类型：</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718174812.png"></p><p>后端传数据的时候要在这声明提交的数据的内容类型才知道是json</p><h2 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h2><p>定义：动态的获取、设置或生成数据，是一种由程序驱动代替人工驱动的数据设计方案，提高脚本的编写效率以及编写质量</p><p>以下四种方式实现参数化：</p><p>1、用户定义的变量<br>2、CSV 数据文件设置<br>3、用户参数<br>4、函数</p><h3 id="参数化–用户定义的变量"><a href="#参数化–用户定义的变量" class="headerlink" title="参数化–用户定义的变量"></a>参数化–用户定义的变量</h3><p>调用格式: ${变量名}</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718175727.png"></p><p>请求路径： {myPath}</p><h3 id="参数化–CSV数据文件设置"><a href="#参数化–CSV数据文件设置" class="headerlink" title="参数化–CSV数据文件设置"></a>参数化–CSV数据文件设置</h3><p>CSV ：逗号分隔值，是一种简洁且常见的数据存储格式，存储语法如下图所示</p><p>实现步骤:<br>1、使用 CSV 文件存储测试数据<br>2、编写被复用的学院新增脚本模板<br>注意2: 编码集使用 UTF-8 无 BOM 格式<br>3、关联脚本与数据(将文件数据导入脚本)</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718180454.png"></p><p>变量名称 : 脚本中的每个字段与变量名称相对应</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718180850.png"></p><h3 id="参数化–用户参数"><a href="#参数化–用户参数" class="headerlink" title="参数化–用户参数"></a>参数化–用户参数</h3><p>实现步骤:<br>1、编写被复用的学院新增脚本模板<br>2、使用 用户参数存储测试数据<br>3、将数据导入脚本模板<br>4、设置执行次数</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718181431.png"></p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718181351.png"></p><h2 id="参数化–函数"><a href="#参数化–函数" class="headerlink" title="参数化–函数"></a>参数化–函数</h2><p>常见函数：<br>_counter 计数器函数 TRUE(每个用户都有自己的计数器) FALSE(所有用户共用一个计数器)<br>_Random 随机数函数 参数1：取值范围最小值(包含) 参数2：取值范围最大值(包含)<br>_time 获取当前时间的函数 无参: 获取的是距离 1970&#x2F;01&#x2F;01 00:00:00 的毫秒值<br>参数</p><p> <img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718191128.png"></p><h2 id="直连数据库"><a href="#直连数据库" class="headerlink" title="直连数据库"></a>直连数据库</h2><p>通过直连数据库让程序代替接口访问数据库，如果二者预期结果不一致，就找到了程序缺陷。<br>获取某条学院的名字，放在百度搜索：<br>1、Jmeter 不具备直连数据库功能，必须整合第三方(jar包)实现<br>2、配置数据库的连接<br>3、通过JDBC Request请求向数据库发送 SQL语句并接收提取响应结果<br>4、结果获取规则可以通过 Debug Sampler 组件查看<br>5、将提取到的响应结果，在百度上</p><ul><li>添加jar包</li></ul><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718215552.png"></p><ul><li>配置数据库</li></ul><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718215630.png"></p><ul><li>编写sql语句</li></ul><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718215804.png"></p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718215910.png"></p><ul><li>获取结果集通过Debug Sampler组件查看</li></ul><p>​<img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718220417.png"></p><ul><li>百度显示</li></ul><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718220853.png"></p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><ul><li><p>断言：让程序代替人工判断响应结果是否符合预期</p></li><li><p>分类：</p><ul><li><p>响应断言 &#x3D; 断言状态码和响应体</p></li><li><p>大小断言 &#x3D; 判断响应内容的字节长度</p></li><li><p>断言持续时间 &#x3D; 判断响应时间</p></li></ul></li><li><p>步骤：</p><ul><li>1、按照之前的实现编写测试脚本</li><li>2、为被判断的取样器添加断言组件</li><li>3、直接运行查看结果断言通过: 无提示</li><li>断言失败: 给出错误</li></ul></li></ul><h2 id="响应断言"><a href="#响应断言" class="headerlink" title="响应断言"></a>响应断言</h2><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718221335.png"></p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718221544.png"></p><h2 id="大小断言"><a href="#大小断言" class="headerlink" title="大小断言"></a>大小断言</h2><p>​判断结果数据多少</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240718221641.png"></p><p>注：响应码是三个字节 ! </p><h2 id="逻辑控制器"><a href="#逻辑控制器" class="headerlink" title="逻辑控制器"></a>逻辑控制器</h2><p>通过参数化可以实现单个接口的功能测试，而接口测试过程中，除了单个接口的功能测试之外，还会测试接口业务实现，所谓业务，就是一套完整的业务逻辑或流程，这就必须要使用到逻辑控制和关联。</p><h3 id="if逻辑控制器"><a href="#if逻辑控制器" class="headerlink" title="if逻辑控制器"></a>if逻辑控制器</h3><p>需求1:测试计划中定义一个 http 请求访问传智播客官网，但是该请求不是无条件执行的，声明一个用户定义的变量，如果变量是 itcast 才执行，否则就不执行<br>1、搭框架，测试计划，线程组，结果树，声明一个用户定义的变量<br>2、核心:添加 if 控制器，子级添加取样器 (和之前实现不同，控制器和取样器存在父子级关系)</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719001401.png"></p><p><img src="E:\blog\source_posts\jmeter.assets\20240719001551.png"></p><blockquote><p> 如果在用户定义变量中设置  名称为myComp值为 itcast 那么请求可以执行</p></blockquote><h3 id="foreach逻辑控制器"><a href="#foreach逻辑控制器" class="headerlink" title="foreach逻辑控制器"></a>foreach逻辑控制器</h3><p>需求2:有一组关键字 [hello,python,测试] (使用用户定义的变量存储)要依次取出，并在百度搜索<br>1、搭框架，测试计划，线程组，结果树，声明一个用户定义的变量,存储一组数据<br>2、添加 forEach 控制器，子级添加取样器 (和之前实现不同，控制器和取样器存在父子级关系)<br>3、百度搜索关键字</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719002211.png"></p><p>配置原件中设置自定义变量</p><table><thead><tr><th align="center">名称</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">name_1</td><td align="center">java</td></tr><tr><td align="center">name_2</td><td align="center">c</td></tr><tr><td align="center">name_3</td><td align="center">py</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719002236.png"></p><blockquote><p>请求路径中含有${ele}</p></blockquote><h3 id="循环逻辑控制器"><a href="#循环逻辑控制器" class="headerlink" title="循环逻辑控制器"></a>循环逻辑控制器</h3><p>需求3:循环访问学生管理系统10次<br>实现:<br>1、搭框架，测试计划，线程组，结果树<br>2、添加循环控制器，子级添加取样器 (和之前实现不同，控制器和取样器存在父子级关系)</p><blockquote><p>局部循环罢了</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719004037.png"></p><h2 id="业务之间的关联"><a href="#业务之间的关联" class="headerlink" title="业务之间的关联"></a>业务之间的关联</h2><p><strong>关联: 上一个请求的响应结果和下一个请求的数据有关系</strong></p><blockquote><p>比如，要删除数据要先查出来才能删除</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719004330.png"></p><h3 id="关联-xpath提取器"><a href="#关联-xpath提取器" class="headerlink" title="关联-xpath提取器"></a>关联-xpath提取器</h3><blockquote><p>获取标签内容</p></blockquote><p>需求:两个http请求，请求A访问传智播客官网，请求B访问百度 ，请求A将传智播客官网源码中的 title 标签的值取出，传递给请求B，在请求B中作为关键字搜索这个 title 值<br>步骤：<br>1、搭框架,编写两个请求，传智播客 + 百度搜索<br>2、核心: 取出传智播客页面源码的 title 值<br>3、传递给百度：${变量名} 的方式传值</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719005319.png"></p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719005042.png"></p><blockquote><p>提取title标签内容，如果请求成功，就会把title标签中的内容放到myTitle变量中</p></blockquote><h3 id="关联-正则表达式提取器"><a href="#关联-正则表达式提取器" class="headerlink" title="关联-正则表达式提取器"></a>关联-正则表达式提取器</h3><p>需求:两个请求,请时求A查询所有学院信息，请求B访问百度，从请求A中提取出第一个学院的学院名称，把名称放在百度上搜索<br>步骤：<br>1、搭框架,编写两个请求，查询所有学院信息 + 百度搜索<br>2、核心:从学院查询中提取学院名称<br>3、传递给百度，调用格式: ${变量名}</p><blockquote><p> 建议: 如果从标签文档提取数据建议使用 XPath 提取器，如果从非标签文档提取数据建议使用正则表达式提取器</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719010039.png"></p><h2 id="跨线程组关联"><a href="#跨线程组关联" class="headerlink" title="跨线程组关联"></a>跨线程组关联</h2><p>变量作用域局限于当前线程组，其他线程组不可以直接调用。可以将请求A中提取的结果导出到公共空间(可以被不同线程组共享),请求B再从公开空间调用该变量，相当于全局变量。</p><p>步骤：<br>1、将请求A的数据导出到公共空间( _setProperty)<br>2、把代码放在beanshell取样器中<br>3、请求B从公共空间调用数据 (__property)</p><blockquote><p>选择函数助手</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719011331.png"></p><blockquote><p>放</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719011423.png"></p><blockquote><p>拿</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719011534.png"></p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>模拟各种正常的、峰值的测试环境，检测程序的各项性能指标是否能够达标 更</p><h3 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h3><p>JMeter 中内置了 定时器，可以实现时间模式相关的性能测试<br>需求1:同一时刻 100 个同学去访问学生管理系统的查询所有学院信息功能,统计高并发情况下平均响应时间以及错误率(高并发)<br>1、搭框架,测试计划，线程组，取样器，结果树(局限性),指定线程组的线程数属性值为 100<br>2、添加定时器 synchronizing timer(集合点组件)<br>3、运行并查看结果查看：聚合报告组件,可以对结果汇总分析</p><h4 id="同步定时器"><a href="#同步定时器" class="headerlink" title="同步定时器"></a>同步定时器</h4><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719012458.png"></p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719012610.png"></p><blockquote><p>超时时间必须要设置，防止出现死等状态</p></blockquote><blockquote><p>将结果树监听器替换成聚合报告</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719012737.png"></p><h3 id="高频率"><a href="#高频率" class="headerlink" title="高频率"></a>高频率</h3><p>需求2:一个用户以 20QPS ( &#x3D;&#x3D; 20 次&#x2F;s) 的频率访问学生管理系统服务器，持续15秒，统计服务器的平均响应时间<br>QPS: Query per Seconds 每秒查询数(查询率),每秒访问多少次服务器<br>1、搭框架，测试计划，线程组，取样器，聚合报告,根据题干计算数据:<br>循环次数 &#x3D; 访问频率 * 持续时间<br>2、添加QPS访问频率控制的相关组件：<br>每分钟访问次数 &#x3D; 访问频率 * 60</p><blockquote><p>设置常量吞吐量定时器</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719013043.png"></p><blockquote><p>设置循环次数，频率*时间  （20qps * 15s&#x3D;300次）</p></blockquote><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><blockquote><p>多台机协作，以集群的方式完成测试任务，可以提高测试效率。</p></blockquote><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719013603.png"></p><p>环境搭建：<br>1、不同的测试机上安装 Jmeter<br>2、配置基础环境(统一操作系统、JDK、Jmeter …. )<br>3、核心: 控制机如何与执行机通信? 关键点：端口号<br>4、控制机中设置执行机的 IP<br>%JMETER_HOME%&#x2F;bin&#x2F;jmeter.properties —-&gt; remote_hosts&#x3D;执行机A的IP:端口号, 执行机B的IP:端口号, …..</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719013752.png"></p><p>3-3、控制机和执行机都得设置远程访问相关属性：<br>server.rmi.ssl.disable&#x3D;true</p><p><img src="https://raw.githubusercontent.com/SuoXiuYuan/typora_img/master/images/jmeter/20240719013803.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="测压" scheme="http://example.com/categories/%E6%B5%8B%E5%8E%8B/"/>
    
    
    <category term="压力测试" scheme="http://example.com/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>后端学习路线</title>
    <link href="http://example.com/posts/bae03965.html"/>
    <id>http://example.com/posts/bae03965.html</id>
    <published>2024-07-17T16:40:18.000Z</published>
    <updated>2024-07-18T08:32:36.123Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java后端的学习路线"><a href="#Java后端的学习路线" class="headerlink" title="Java后端的学习路线"></a><strong>Java后端的学习路线</strong></h1><p>注：原创来自于晋中信息学院双体软件精英产业学院，本人二次修改并非原创</p><h2 id="第一部分：java基础"><a href="#第一部分：java基础" class="headerlink" title="第一部分：java基础"></a>第一部分：java基础</h2><ul><li><h3 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h3><p><a href="https://www.bilibili.com/video/BV1Rx411876f/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544">https://www.bilibili.com/video/BV1Rx411876f/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544</a></p></li><li><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3></li></ul><p>​<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a></p><ul><li><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p><a href="https://www.bilibili.com/video/BV1Bt41137iB">https://www.bilibili.com/video/BV1Bt41137iB</a></p><p>完成后写一个飞机大战大作业</p><h3 id="飞机大战"><a href="#飞机大战" class="headerlink" title="飞机大战"></a>飞机大战</h3><p><a href="https://www.bilibili.com/video/BV1oz4y1a7xU">https://www.bilibili.com/video/BV1oz4y1a7xU</a></p></li></ul><h2 id="第二部分：数据结构"><a href="#第二部分：数据结构" class="headerlink" title="第二部分：数据结构"></a>第二部分：数据结构</h2><ul><li><h3 id="韩顺平版"><a href="#韩顺平版" class="headerlink" title="韩顺平版"></a>韩顺平版</h3></li></ul><p>​<a href="https://www.bilibili.com/video/BV1E4411H73v">https://www.bilibili.com/video/BV1E4411H73v</a></p><ul><li><h3 id="黑马"><a href="#黑马" class="headerlink" title="黑马"></a>黑马</h3><p><a href="https://www.bilibili.com/video/BV1oz4y1a7xU">https://www.bilibili.com/video/BV1oz4y1a7xU</a></p></li><li><h3 id="左程云版-有点难度不建议初学者，推荐算法比赛的人听"><a href="#左程云版-有点难度不建议初学者，推荐算法比赛的人听" class="headerlink" title="左程云版(有点难度不建议初学者，推荐算法比赛的人听)"></a>左程云版(有点难度不建议初学者，推荐算法比赛的人听)</h3><p>(<a href="https://space.bilibili.com/8888480">https://space.bilibili.com/8888480</a>)</p></li></ul><hr><h2 id="第三部分：web前端"><a href="#第三部分：web前端" class="headerlink" title="第三部分：web前端"></a>第三部分：web前端</h2><ul><li><h3 id="HTML5-CSS3"><a href="#HTML5-CSS3" class="headerlink" title="HTML5+CSS3"></a>HTML5+CSS3</h3><p><a href="https://www.bilibili.com/video/BV1XJ411X7Ud/">https://www.bilibili.com/video/BV1XJ411X7Ud/</a></p></li><li><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3></li></ul><p>​<a href="https://www.bilibili.com/video/av62653534/">https://www.bilibili.com/video/av62653534/</a></p><ul><li><h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a><strong>jquery</strong></h3><p><a href="https://www.bilibili.com/video/BV1pt411H7D6/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1pt411H7D6/?spm_id_from=333.337.search-card.all.click（黑马）</a></p><p><a href="https://www.bilibili.com/video/BV1ts411E7ag/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1ts411E7ag/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV1Jg4y1B7n4/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1Jg4y1B7n4/?spm_id_from=333.337.search-card.all.click（动力节点）</a></p></li></ul><h2 id="第四部分：框架总结"><a href="#第四部分：框架总结" class="headerlink" title="第四部分：框架总结"></a>第四部分：框架总结</h2><ul><li><h3 id="Maven框架"><a href="#Maven框架" class="headerlink" title="Maven框架"></a><a href="https://www.bilibili.com/video/BV1dp4y1Q7Hf/?spm_id_from=333.337.search-card.all.click&vd_source=205b9aa791a13bdcc9e04b9d7d1e0544">Maven框架</a></h3></li><li><h3 id="JavaWeb（三选一）"><a href="#JavaWeb（三选一）" class="headerlink" title="JavaWeb（三选一）"></a>JavaWeb（三选一）</h3><p><a href="https://www.bilibili.com/video/BV1Y7411K7zz?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1Y7411K7zz?spm_id_from=333.337.search-card.all.click（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV1Z3411C7NZ/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%E8%80%81%E6%9D%9C%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1Z3411C7NZ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（动力节点老杜的）</a></p><p><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV1Qf4y1T7Hx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马的）</a></p></li><li><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="%5B%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98Git%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%8C%E5%AE%8C%E6%95%B4%E7%9A%84git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B%EF%BC%8C%E4%B8%80%E5%A5%97%E7%B2%BE%E9%80%9Agit_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1MU4y1Y7h5/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544)">Git</a></h3></li><li><h3 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp/?spm_id_from=333.337.search-card.all.click">SSM框架整合</a></h3></li><li><h3 id="SSM项目"><a href="#SSM项目" class="headerlink" title="SSM项目"></a><a href="%5B%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9java%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%7CSpring+Mybatis+Springmvc%E6%A1%86%E6%9E%B6SSM%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E6%95%B4%E5%90%88-%E3%80%90CRM%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E3%80%91_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1tZ4y1d7kg/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2)">SSM项目</a></h3></li><li><h3 id="SpringBoot（三选一）"><a href="#SpringBoot（三选一）" class="headerlink" title="SpringBoot（三选一）"></a>SpringBoot（三选一）</h3><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV19K4y1L7MT/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a> (尚硅谷)</p><p><a href="https://www.bilibili.com/video/BV15b4y1a7yG/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV15b4y1a7yG/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p><p><a href="https://www.bilibili.com/video/BV1XQ4y1m7ex/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1XQ4y1m7ex/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（动力节点）</a></p></li><li><h3 id="VUE-二选一"><a href="#VUE-二选一" class="headerlink" title="VUE(二选一)"></a>VUE(二选一)</h3><ul><li><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?spm_id_from=333.337.search-card.all.click%E5%B0%9A%E7%A1%85%E8%B0%B7">https://www.bilibili.com/video/BV1Zy4y1K7SH/?spm_id_from=333.337.search-card.all.click尚硅谷</a></p></li><li><p><a href="https://www.bilibili.com/video/BV17h41137i4/?spm_id_from=333.337.search-card.all.click&vd_source=205b9aa791a13bdcc9e04b9d7d1e0544%E8%80%81%E6%9D%9C">https://www.bilibili.com/video/BV17h41137i4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=205b9aa791a13bdcc9e04b9d7d1e0544老杜</a></p></li></ul></li><li><h3 id="SpringBoot项目"><a href="#SpringBoot项目" class="headerlink" title="SpringBoot项目"></a>SpringBoot项目</h3><ul><li><h6 id="苍穹外卖"><a href="#苍穹外卖" class="headerlink" title="苍穹外卖"></a>苍穹外卖</h6><h6 id="https-www-bilibili-com-video-BV1TP411v7v6-vd-source-205b9aa791a13bdcc9e04b9d7d1e0544"><a href="#https-www-bilibili-com-video-BV1TP411v7v6-vd-source-205b9aa791a13bdcc9e04b9d7d1e0544" class="headerlink" title="https://www.bilibili.com/video/BV1TP411v7v6/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544"></a><a href="https://www.bilibili.com/video/BV1TP411v7v6/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544">https://www.bilibili.com/video/BV1TP411v7v6/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544</a></h6></li></ul></li></ul><h2 id="第五部分：分布式，微服务，并行架构"><a href="#第五部分：分布式，微服务，并行架构" class="headerlink" title="第五部分：分布式，微服务，并行架构"></a>第五部分：分布式，微服务，并行架构</h2><ul><li><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h3><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%9F%A9%E9%A1%BA%E5%B9%B3%E7%9A%84%EF%BC%8C%E8%AE%B2%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%EF%BC%89">https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click（韩顺平的，讲的很详细）</a></p></li><li><h2 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a><a href="https://www.bilibili.com/video/BV1LQ4y127n4/?spm_id_from=333.337.search-card.all.click&vd_source=205b9aa791a13bdcc9e04b9d7d1e0544">springcloud</a></h2></li><li><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><a href="https://www.bilibili.com/video/BV1HP4118797/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544">Docker</a></h3></li><li><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a><a href="https://www.bilibili.com/video/BV1VE411q7dX/">Dubbo</a></h3></li><li><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a><a href="https://www.bilibili.com/video/BV1M741137qY/?vd_source=205b9aa791a13bdcc9e04b9d7d1e0544">Zookeeper</a></h3></li><li><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><a href="https://www.bilibili.com/video/BV1cr4y1671t/">Redis</a></h3></li><li><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a><a href="https://www.bilibili.com/video/BV1bJ411x7mq/">MongoDB</a></h3></li><li><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a><a href="https://www.bilibili.com/video/BV1mN4y1Z7t9/">RabbitMQ</a></h3></li><li><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a><a href="https://www.bilibili.com/video/BV1L4411y7mn/">RocketMQ</a></h3></li><li><h3 id="KafKa"><a href="#KafKa" class="headerlink" title="KafKa"></a><strong>KafKa</strong></h3><p><a href="https://www.bilibili.com/video/BV1vr4y1677k/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1vr4y1677k/?spm_id_from=333.337.search-card.all.click（尚硅谷）</a></p><p><a href="https://www.bilibili.com/video/BV19y4y1b7Uo/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV19y4y1b7Uo/?spm_id_from=333.337.search-card.all.click（黑马）</a></p></li><li><h3 id="activiti工作流-流程引擎"><a href="#activiti工作流-流程引擎" class="headerlink" title="activiti工作流(流程引擎)"></a>activiti工作流(流程引擎)</h3></li><li><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a><strong>搜索引擎</strong></h3><ul><li><p><strong>ElasticSeqrch（简称es）</strong></p><p><a href="https://www.bilibili.com/video/BV1nF411F75k/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1nF411F75k/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>Solr</strong></p><p><a href="https://www.bilibili.com/video/BV1dh411Q7Qu/?spm_id_from=333.337.search-card.all.click%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV1dh411Q7Qu/?spm_id_from=333.337.search-card.all.click（黑马）</a></p><p><a href="https://www.bilibili.com/video/BV1gZ4y1a7RH/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8D%83%E5%B3%B0%EF%BC%89">https://www.bilibili.com/video/BV1gZ4y1a7RH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（千峰）</a></p></li></ul></li><li><h3 id="Mycat"><a href="#Mycat" class="headerlink" title="Mycat"></a>Mycat</h3><ul><li><p><a href="https://www.bilibili.com/video/BV1iT41157JX/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV1iT41157JX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1gK4y1b7iU/?spm_id_from=333.337.search-card.all.click&vd_source=6216137a62188143a3e1e83d34f9035a2%EF%BC%88%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%EF%BC%89">https://www.bilibili.com/video/BV1gK4y1b7iU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6216137a62188143a3e1e83d34f9035a2（动力节点）</a></p></li><li><p><a href="https://www.bilibili.com/video/BV17f4y1D7pm/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E9%BB%91%E9%A9%AC%EF%BC%89">https://www.bilibili.com/video/BV17f4y1D7pm/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（黑马）</a></p></li></ul></li><li><h3 id="日志分析与监控（ELK）"><a href="#日志分析与监控（ELK）" class="headerlink" title="日志分析与监控（ELK）"></a><strong>日志分析与监控（ELK）</strong></h3><ul><li><strong>ElasticSearch（搜集，存储数据）</strong></li><li><strong>LogStatsh（分析日志）</strong></li><li><strong>Kibana（可视化）</strong></li></ul></li><li><h3 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h3><ul><li><p><strong><a href="https://www.bilibili.com/video/BV1VE411h7aL/?spm_id_from=333.337.search-card.all.click&vd_source=205b9aa791a13bdcc9e04b9d7d1e0544">springsecurity</a></strong></p></li><li><p><strong>Shiro</strong></p></li><li><p><strong>SaToken</strong></p></li></ul></li><li><h3 id="支付（支付宝沙箱支付，微信支付等）"><a href="#支付（支付宝沙箱支付，微信支付等）" class="headerlink" title="支付（支付宝沙箱支付，微信支付等）"></a>支付（支付宝沙箱支付，微信支付等）</h3></li></ul><h2 id="第六部分：DevOps-开发运维一体化-自动化部分管理项目，解决CI-CD"><a href="#第六部分：DevOps-开发运维一体化-自动化部分管理项目，解决CI-CD" class="headerlink" title="第六部分：DevOps(开发运维一体化)自动化部分管理项目，解决CI&#x2F;CD"></a>第六部分：DevOps(开发运维一体化)自动化部分管理项目，解决CI&#x2F;CD</h2><p><a href="https://www.bilibili.com/video/BV13Q4y1C7hS/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%88%E5%B0%9A%E7%A1%85%E8%B0%B7%EF%BC%89">https://www.bilibili.com/video/BV13Q4y1C7hS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（尚硅谷）</a></p><ul><li><strong>k8s</strong></li><li><strong>普罗米修斯prometheus</strong></li><li><strong>Jenkins</strong></li><li><strong>Harbor</strong></li><li><strong>GitLab</strong></li><li><strong>项目工程代码质量检测（sonarqube）</strong></li></ul><h2 id="第七部分：大数据技术"><a href="#第七部分：大数据技术" class="headerlink" title="第七部分：大数据技术"></a>第七部分：大数据技术</h2><ul><li><p><strong>Hadoop</strong></p><p><a href="https://www.bilibili.com/video/BV1Qp4y1n7EN/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Qp4y1n7EN/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p><p><a href="https://www.bilibili.com/video/BV1CU4y1N7Sh/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1CU4y1N7Sh/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>Hive</strong></p><p><a href="https://www.bilibili.com/video/BV1EZ4y1G7iL/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1EZ4y1G7iL/?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1L5411u7ae/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1L5411u7ae/?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>Impals</strong></p><p><a href="https://www.bilibili.com/video/BV1GA411E7V9/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1GA411E7V9/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>spark</strong></p><p><a href="https://www.bilibili.com/video/BV11A411L7CK/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV11A411L7CK/?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1Jq4y1z7VP/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Jq4y1z7VP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>flink</strong></p><p><a href="https://www.bilibili.com/video/BV133411s7Sa/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV133411s7Sa/?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1Gt4y1z7bR/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Gt4y1z7bR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JAVA 后端学习路线" scheme="http://example.com/categories/JAVA-%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>不会再有任何的算法更新了，进度表和技术更新随缘</title>
    <link href="http://example.com/posts/3b112aa3.html"/>
    <id>http://example.com/posts/3b112aa3.html</id>
    <published>2024-04-30T13:50:22.000Z</published>
    <updated>2024-07-18T08:32:14.108Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前后端的区别</title>
    <link href="http://example.com/posts/b3d49ee0.html"/>
    <id>http://example.com/posts/b3d49ee0.html</id>
    <published>2024-04-30T13:41:20.000Z</published>
    <updated>2024-07-18T08:33:06.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-前端开发"><a href="#1-前端开发" class="headerlink" title="1.前端开发"></a>1.前端开发</h3><h4 id="1-1-职责："><a href="#1-1-职责：" class="headerlink" title="1.1 职责："></a>1.1 职责：</h4><ul><li>负责实现用户界面，包括网页的布局、样式和交互。</li><li>与设计师合作，将设计稿转化为可交互的网页。</li><li>优化网页性能和用户体验，确保页面加载速度和响应性。</li></ul><h3 id="2-后端开发"><a href="#2-后端开发" class="headerlink" title="2.后端开发"></a>2.后端开发</h3><h4 id="2-1-职责："><a href="#2-1-职责：" class="headerlink" title="2.1 职责："></a>2.1 职责：</h4><ul><li>负责处理客户端和服务器之间的交互，处理HTTP请求和响应。</li><li>实现业务逻辑和数据处理，与数据库交互进行数据的增删改查。</li><li>确保系统的安全性和稳定性，预防数据泄露和攻击。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端</title>
    <link href="http://example.com/posts/f3b98ae9.html"/>
    <id>http://example.com/posts/f3b98ae9.html</id>
    <published>2024-04-30T13:34:29.000Z</published>
    <updated>2024-07-18T08:31:09.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前端路线："><a href="#前端路线：" class="headerlink" title="前端路线："></a>前端路线：</h3><p>注：原创来自于晋中信息学院双体软件精英产业学院，本人二次修改并非原创</p><h4 id="第一部分：-基础"><a href="#第一部分：-基础" class="headerlink" title="第一部分：(基础)"></a>第一部分：(基础)</h4><ul><li><p><strong>html</strong></p></li><li><p><strong>css</strong></p><p><a href="https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>html5</strong></p></li><li><p><strong>css3</strong></p><p><a href="https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1XJ411X7Ud?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>尚优选（练习如何布局）</strong></p><p><a href="https://www.bilibili.com/video/BV1ra411X7RX/?vd_source=fb74ca8f85f5680ee6b71243e4bd4322">https://www.bilibili.com/video/BV1ra411X7RX/?vd_source=fb74ca8f85f5680ee6b71243e4bd4322</a></p></li><li><p><strong>学完这些之后，自己手敲一个京东页面，一个博学谷页面（脱离视频）</strong></p></li></ul><h4 id="第二部分：（进阶）"><a href="#第二部分：（进阶）" class="headerlink" title="第二部分：（进阶）"></a>第二部分：（进阶）</h4><ul><li><p><strong>javaScript（这个很重要）</strong></p><p><a href="https://www.bilibili.com/video/BV1YW411T7GX?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1YW411T7GX?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>javaScript高级</strong></p><p><a href="https://www.bilibili.com/video/BV14s411E7qf?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV14s411E7qf?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>AJAX（发请求用到的）</strong></p><p><a href="https://www.bilibili.com/video/BV1WC4y1b78y?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1WC4y1b78y?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>es6（同样重要）</strong></p><p><a href="https://www.bilibili.com/video/BV1uK411H7on?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1uK411H7on?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>Promise</strong></p><p><a href="https://www.bilibili.com/video/BV1GA411x7z1?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1GA411x7z1?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>axios</strong></p><p><a href="https://www.bilibili.com/video/BV1wr4y1K7tq?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1wr4y1K7tq?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>node.js（前端的后台）</strong></p><p><a href="https://www.bilibili.com/video/BV1bs411E7pD?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1bs411E7pD?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>webpack5</strong></p><p><a href="https://www.bilibili.com/video/BV1cv411C74F?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1cv411C74F?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p><p><a href="https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1e7411j7T5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li></ul><h4 id="第三部分：（框架）"><a href="#第三部分：（框架）" class="headerlink" title="第三部分：（框架）"></a>第三部分：（框架）</h4><ul><li><p><strong>Vue2+Vue3</strong></p><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Zy4y1K7SH?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>vue2项目实战</strong></p><p><a href="https://www.bilibili.com/video/BV1Vf4y1T7bw/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Vf4y1T7bw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>微信小程序</strong></p><p><a href="https://www.bilibili.com/video/BV1834y1676P/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1834y1676P/?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>微信小程序实战</strong></p><p><a href="https://www.bilibili.com/video/BV12K411A7A2/?spm_id_from=333.999.0.0&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV12K411A7A2/?spm_id_from=333.999.0.0&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>node项目</strong></p><p><a href="https://www.bilibili.com/video/BV17b4y1778c/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV17b4y1778c/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>vue3教学（上面大部分都为vue2，此视频为单独的vue3教学）</strong></p><p><a href="https://www.bilibili.com/video/BV1NR4y1x7Ab/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1NR4y1x7Ab/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>vue3项目实战</strong></p><p><a href="https://www.bilibili.com/video/BV1uB4y1a7se/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1uB4y1a7se/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>TypeScript</strong></p><p><a href="https://www.bilibili.com/video/BV1Xy4y1v7S2/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Xy4y1v7S2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>React</strong></p><p><a href="https://www.bilibili.com/video/BV1wy4y1D7JT?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1wy4y1D7JT?spm_id_from=333.337.search-card.all.click</a></p></li><li><p><strong>React项目（react版本更新快，并且版本之间更新比较大，如果博客更新不及时，请自行选择）</strong></p><p><a href="https://www.bilibili.com/video/BV1gh411U7JD/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%882021%EF%BC%89">https://www.bilibili.com/video/BV1gh411U7JD/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（2021）</a></p><p><a href="https://www.bilibili.com/video/BV1FV4y157Zx/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2%EF%BC%882022%EF%BC%89">https://www.bilibili.com/video/BV1FV4y157Zx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2（2022）</a></p></li></ul><h4 id="第四部分：（其他）"><a href="#第四部分：（其他）" class="headerlink" title="第四部分：（其他）"></a>第四部分：（其他）</h4><ul><li><p><strong>大厂面试题</strong></p></li><li><p><strong>Git</strong></p><p><a href="https://www.bilibili.com/video/BV1vy4y1s7k6/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1vy4y1s7k6/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p><p><a href="https://www.bilibili.com/video/BV1MU4y1Y7h5/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1MU4y1Y7h5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li><li><p><strong>jQuery（可学可不学）</strong></p></li><li><p><strong>Linux</strong></p><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click&vd_source=621637a62188143a3e1e83d34f9035a2">https://www.bilibili.com/video/BV1Sv411r7vd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=621637a62188143a3e1e83d34f9035a2</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>字符串的常用api</title>
    <link href="http://example.com/posts/93fe3ac.html"/>
    <id>http://example.com/posts/93fe3ac.html</id>
    <published>2023-09-24T10:27:33.000Z</published>
    <updated>2024-07-17T16:35:13.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>charAt(index)：获取字符串索引为index的字符<br>substring(index1, index2)：从索引index1(包含)到索引index2(不包含)截取字符串indexOf(s)：获取字符s的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_40052298/article/details/121868965?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169555251216800182147809%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169555251216800182147809&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-121868965-null-null.142^v94^insert_down1&amp;utm_term=java%20substring%E6%96%B9%E6%B3%95&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure><p>contains(s)：字符串是否包含字符s<br>split(char)：按字符char对字符串进行切分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_26893841/article/details/127919230?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169555212616800188571527%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169555212616800188571527&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-127919230-null-null.142^v94^insert_down1&amp;utm_term=javasplit&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure><p>trim()：去除字符串两端的空白字符<br>Arrays.toString(sz)：将字符数组sz转成字符串</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串常用api" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8api/"/>
    
    
  </entry>
  
  <entry>
    <title>双指针算法</title>
    <link href="http://example.com/posts/9fba193f.html"/>
    <id>http://example.com/posts/9fba193f.html</id>
    <published>2023-09-06T07:23:27.000Z</published>
    <updated>2024-07-17T16:35:13.978Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h1><p>双指针算法是一种通过维护两个指针来合并两个有序序列的算法。其中，一个指针指向其中一个序列，另一个指针指向另外一个序列。在每次迭代中，两个指针分别移动一步，当两个指针都移动完毕时，整个排序过程结束。双指针算法可以优化朴素算法的时间复杂度，从O(n^2)^  优化为O(n)。优化后的算法利用了两个指针的单调性，使得我们只需要枚举O(n)个状态，而不是朴素算法中的O(n^2)个状态</p><h2 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for(i=0,j=0;i&lt;n;i++)&#123;</span><br><span class="line"></span><br><span class="line">while(j&lt;i&amp;&amp;check(i,j) j++)</span><br><span class="line">//(check()为某个特定条件)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//每道题的逻辑</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h2><p>输入一行字母，每个单词之间有空格，把每个单词放在不同的行</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc bcd efg</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">bcd</span><br><span class="line">efg</span><br></pre></td></tr></table></figure><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p><strong>java：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc=new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        String s1=sc.nextLine();</span><br><span class="line"></span><br><span class="line">        int n=s1.length();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">            int j=i;</span><br><span class="line"></span><br><span class="line">            while (j&lt;n&amp;&amp;s1.charAt(j)!=&#x27; &#x27;)  j++;</span><br><span class="line"></span><br><span class="line">            for (int k = i; k &lt; j ; k++) &#123;</span><br><span class="line">                System.out.print(s1.charAt(k));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            i=j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ps！！</strong>：next()与nextLine()比较大的区别是用next()不能得到带空格的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>,而nextLine()可以。</p><h3 id="例题二："><a href="#例题二：" class="headerlink" title="例题二："></a>例题二：</h3><p>给定一个长度为 n 的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含整数 n。</p><p>第二行包含 n 个整数（均在 0∼10^5 范围内），表示整数序列。</p><p>输出格式</p><p>共一行，包含一个整数，表示最长的不包含重复的数的连续区间的长度。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤n≤10^5</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><p>5<br>1 2 2 3 5</p><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><p>3</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><p>java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    final static int N=(int) (1e5+10);</span><br><span class="line"></span><br><span class="line">    static int[]arr=new int[N];</span><br><span class="line"></span><br><span class="line">    static int[]s=new int[N];</span><br><span class="line"></span><br><span class="line">//用于记录数组中数字出现的次数</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BufferedReader bufferedReader= new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        int n = Integer.parseInt(bufferedReader.readLine());</span><br><span class="line"></span><br><span class="line">        String[] input = bufferedReader.readLine().split(&quot; &quot;);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">            arr[i]=Integer.parseInt(input[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int ans=0;</span><br><span class="line"></span><br><span class="line">//区间顺序从j到i</span><br><span class="line"></span><br><span class="line">        for (int i = 0, j=0; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">            s[arr[i]]++;</span><br><span class="line"></span><br><span class="line">            while (s[arr[i]]&gt;1&amp;&amp;i&gt;=j) &#123;</span><br><span class="line"></span><br><span class="line">                s[arr[j]]--;</span><br><span class="line"></span><br><span class="line">                j++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            ans=Math.max(ans, i-j+1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="双指针算法" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前缀和与差分</title>
    <link href="http://example.com/posts/77a88a6b.html"/>
    <id>http://example.com/posts/77a88a6b.html</id>
    <published>2023-09-05T04:06:23.000Z</published>
    <updated>2024-07-17T16:35:13.970Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h1><h2 id="一，前缀和"><a href="#一，前缀和" class="headerlink" title="一，前缀和"></a>一，前缀和</h2><p><strong>前缀和是指某序列的前n项和，可以把它理解为数学上的数列的前n项和，而差分可以看成前缀和的逆运算。合理的使用前缀和与差分，可以将某些复杂的问题简单化。</strong></p><h3 id="1-1-一维前缀和"><a href="#1-1-一维前缀和" class="headerlink" title="1.1 一维前缀和"></a>1.1 一维前缀和</h3><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a><strong>原理：</strong></h4><p>sum[r] &#x3D; a[1] + a[2] + a[3] + a[l-1] + a[l] + a[l + 1] …… a[r];<br>sum[l - 1] &#x3D; a[1] + a[2] + a[3] + a[l - 1];<br>sum[r] - sum[l - 1] &#x3D; a[l] + a[l + 1] + ……+ a[r];</p><h4 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h4><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=new Scanner(System.in);</span><br><span class="line">        int n=sc.nextInt();</span><br><span class="line">        int[]arr=new int[n];</span><br><span class="line">        int[]sn=new int[n];</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i]=sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        sn[0]=arr[0];</span><br><span class="line">        for (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sn[i]=sn[i-1]+arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; sn.length; i++) &#123;</span><br><span class="line">            System.out.println(sn[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        //        求l 到r 的区间和</span><br><span class="line">        int l=sc.nextInt();</span><br><span class="line">        int r=sc.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(sn[r]-sn[l-1]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2二维前缀和"><a href="#1-2二维前缀和" class="headerlink" title="1.2二维前缀和"></a>1.2二维前缀和</h3><h4 id="二维前缀和预处理公式"><a href="#二维前缀和预处理公式" class="headerlink" title="二维前缀和预处理公式"></a><strong>二维前缀和预处理公式</strong></h4><p>可以看成面积（集合），</p><p><strong>s[i][j】为整个二维前缀和数组右下角的值，即可以看做整个面积</strong></p><p>根据容斥原理可得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[i][j] = s[i - 1][j] + s[i][j - 1 ] + a[i] [j] - s[i - 1][j - 1]</span><br></pre></td></tr></table></figure><p>若求区间（例如x1,y1到x2，y2的前缀和，则为x1,y1  x2,y2所围成的面积）</p><p><strong>因此二维前缀和的结论为：</strong></p><p>以<code>(x1, y1)</code>为左上角，<code>(x2, y2)</code>为右下角的子矩阵的和为：<br><code>s[x2, y2] - s[x1 - 1, y2] - s[x2, y1 - 1] + s[x1 - 1, y1 - 1]</code></p><p>注意，构造矩阵的时候从arr【1】【1】开始，这样为了防止出现边界问题</p><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p>输入一个n行m列的整数矩阵，再输入q个询问，每个询问包含四个整数x1, y1, x2, y2，表示一个子矩阵的左上角坐标和右下角坐标。</p><p>对于每个询问输出子矩阵中所有数的和。</p><p><strong>输入格式</strong><br>第一行包含三个整数n，m，q。</p><p>接下来n行，每行包含m个整数，表示整数矩阵。</p><p>接下来q行，每行包含四个整数x1, y1, x2, y2，表示一组询问。</p><p><strong>输出格式</strong></p><p>共q行，每行输出一个询问的结果。</p><p><strong>数据范围</strong></p><p>1≤n,m≤1000,<br>1≤q≤200000,<br>1≤x1≤x2≤n,<br>1≤y1≤y2≤m,<br>−1000≤矩阵内元素的值≤1000</p><p><strong>输入样例：</strong></p><p>3 4 3<br>1 7 2 4<br>3 6 2 8<br>2 1 2 3<br>1 1 2 2<br>2 1 3 4<br>1 3 3 4</p><p><strong>输出样例：</strong></p><p>17<br>27<br>21</p><p><strong>代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">const int N= 1010;</span><br><span class="line"> </span><br><span class="line">int q[N][N];</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    int n, m, qn;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;qn);</span><br><span class="line">    </span><br><span class="line">    //一定要从1开始，不然边界问题好难处理</span><br><span class="line">    for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">        for(int j = 1; j &lt;= m; j++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;q[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int s[N][N];</span><br><span class="line">    </span><br><span class="line">    // 构建前缀和</span><br><span class="line">    for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">        for(int j = 1; j &lt;= m; j++)&#123;</span><br><span class="line">            s[i][j] =s[i-1][j] + s[i][j-1]-s[i-1][j-1]+q[i][j]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int xa, ya, xb, yb;</span><br><span class="line">    </span><br><span class="line">    //区间更新</span><br><span class="line">    while(qn--)&#123;</span><br><span class="line">        scanf(&quot;%d %d %d %d&quot;, &amp;xa, &amp;ya, &amp;xb, &amp;yb);</span><br><span class="line">        printf(&quot;%d\n&quot;, s[xb][yb] - s[xa-1][yb] -s[xb][ya-1] +s[xa-1][ya-1]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int n=sc.nextInt();</span><br><span class="line">        int m=sc.nextInt();</span><br><span class="line">        int q=sc.nextInt();</span><br><span class="line"></span><br><span class="line">        int[][]arr=new int[n+1][m+1];</span><br><span class="line">        int[][]sn=new int[n+1][m+1];</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;= m; j++) &#123;</span><br><span class="line"></span><br><span class="line">                arr[i][j]=sc.nextInt();</span><br><span class="line">                sn[i][j]=arr[i][j];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;= m; j++) &#123;</span><br><span class="line">                sn[i][j]+=sn[i][j-1]+sn[i-1][j]-sn[i-1][j-1];</span><br><span class="line">//      这里的+=在运算之前sn【i】【j】值为arr【i】【j】</span><br><span class="line">//sn[i][j]=arr[i][j]+sn[i][j-1]+sn[i-1][j]-sn[i-1][j-1];</span><br><span class="line">//arr[i][j]=sn[i][j]-sn[i][j-1]-sn[i-1][j]+sn[i-1][j-1]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">while (q--&gt;=0)&#123;</span><br><span class="line">    int x1=sc.nextInt();</span><br><span class="line"></span><br><span class="line">    int y1=sc.nextInt();</span><br><span class="line"></span><br><span class="line">    int x2=sc.nextInt();</span><br><span class="line"></span><br><span class="line">    int y2=sc.nextInt();</span><br><span class="line"></span><br><span class="line">    System.out.println(sn[x2][y2]-sn[x2][y1-1]-sn[x1-1][y2]+sn[x1-1][y1-1]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-差分"><a href="#二-差分" class="headerlink" title="二,差分"></a>二,差分</h2><h3 id="2-1-1一维差分"><a href="#2-1-1一维差分" class="headerlink" title="2.1.1一维差分"></a>2.1.1一维差分</h3><p>类似于数学中的求导和积分，差分可以看成前缀和的逆运算。</p><p><strong>差分数组：</strong></p><p>首先给定一个原数组a：a[1], a[2], a[3],,,,,, a[n];</p><p>然后我们构造一个数组b ： b[1], b[2], b[3],,,,,, b[i];</p><p>使得 a[i] &#x3D; b[1] + b[2] + b[3] + ,,,,,, + b[i]</p><p>也就是说，a数组是b数组的前缀和数组，反过来我们把b数组叫做a数组的差分数组。换句话说，每一个a[i]都是b数组中从头开始的一段区间和。</p><p>考虑如何构造差分b数组？</p><p>最为直接的方法</p><p>如下：</p><p>a[0 ]&#x3D; 0;</p><p>b[1] &#x3D; a[1] - a[0];</p><p>b[2] &#x3D; a[2] - a[1];</p><p>b[3] &#x3D; a [3] - a[2];</p><p>……..</p><p>b[n] &#x3D; a[n] - a[n - 1];</p><h4 id="2-1-2差分数组的作用："><a href="#2-1-2差分数组的作用：" class="headerlink" title="2.1.2差分数组的作用："></a>2.1.2差分数组的作用：</h4><pre><code>    也就是在O(n)的时间， 通过 b 差分数组 可以还原出他的 前缀和数组 a ，运用 差分的思想 可以很好的解决一类问题：    例如给定一个区间 [l, r]  让a数组，这里边所有的数都加上c，如果是用遍历，那就需要O(n)的复杂度    如果用差分来做，就可以做到O(1)原理如下:  因为 ai = b1+ b2 + …+ bi    所以只需要对 b[l] 做 +c 的操作，那 a[l] 往后的数都会 +c  又因为题目要求，只是 [l, r] 的区间，所以在对b[r+1] 做-c 的操作，相抵消，那 a[r+1] 之后的数就不会加上c了，  这样再用b数组求前缀和，还原出的a数组 就是最后的结果    所以只需要O(1)的时间就可以实现，以空间换时间</code></pre><h4 id="2-1-3例题"><a href="#2-1-3例题" class="headerlink" title="2.1.3例题"></a>2.1.3例题</h4><p><strong>题目练习： AcWing 797. 差分</strong></p><p><strong>输入一个长度为n的整数序列。</strong><br>接下来输入m个操作，每个操作包含三个整数l, r, c，表示将序列中[l, r]之间的每个数加上c。<br>请你输出进行完所有操作后的序列。</p><p><strong>输入格式</strong><br>第一行包含两个整数n和m。<br>第二行包含n个整数，表示整数序列。<br>接下来m行，每行包含三个整数l，r，c，表示一个操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 2 2 1 2 1</span><br><span class="line">1 3 1</span><br><span class="line">3 5 1</span><br><span class="line">1 6 1</span><br></pre></td></tr></table></figure><p><strong>输出格式</strong><br>共一行，包含n个整数，表示最终序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 5 3 4 2</span><br></pre></td></tr></table></figure><p>————————————————<br><strong>代码实现：</strong></p><p><strong>java:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int n=sc.nextInt();</span><br><span class="line">        int m=sc.nextInt();</span><br><span class="line"></span><br><span class="line">        int[]arr=new int[n+100];</span><br><span class="line">        int[]b=new int[n+100];</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            arr[i]=sc.nextInt();</span><br><span class="line">//构建差分数组</span><br><span class="line">            b[i]=arr[i]-arr[i-1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        while(m--&gt;0) &#123;</span><br><span class="line"></span><br><span class="line">            int l=sc.nextInt();</span><br><span class="line">            int r=sc.nextInt();</span><br><span class="line">            int c=sc.nextInt();</span><br><span class="line">//原数组是差分数组的前缀和数组，分别在差分数组的左右边界处分别加减c，会导致差分数组的前缀和数组除了边界值外的数保持不变</span><br><span class="line">            b[l]=b[l]+c;</span><br><span class="line">            b[r+1]=b[r+1]-c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;=n; i++) &#123;</span><br><span class="line">            arr[i]=b[i]+arr[i-1];</span><br><span class="line">            System.out.print(arr[i]+&quot;  &quot;);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c++:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1e5 + 10;</span><br><span class="line">int a[N],b[N]; </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">    for(int i = 1;i &lt;= n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">        b[i] = a[i] - a[i - 1];      //构建差分数组</span><br><span class="line">    &#125;</span><br><span class="line">    int l, r, c;</span><br><span class="line">    while(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;l, &amp;r, &amp;c);</span><br><span class="line">        b[l] += c;     //表示将序列中[l, r]之间的每个数加上c</span><br><span class="line">        b[r + 1] -= c;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 1;i &lt;= n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        b[i] += b[i - 1];  //求前缀和运算</span><br><span class="line">        printf(&quot;%d &quot;,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-1二维差分"><a href="#2-2-1二维差分" class="headerlink" title="2.2.1二维差分"></a>2.2.1二维差分</h3><p><code>a[][]</code>数组是<code>b[][]</code>数组的前缀和数组，那么<code>b[][]</code>是<code>a[][]</code>的差分数组</p><p>原数组： <code>a[i][j]</code></p><p>我们去构造差分数组： <code>b[i][j]</code></p><p>使得<code>a</code>数组中<code>a[i][j]</code>是<code>b</code>数组左上角<code>(1,1)</code>到右下角<code>(i,j)</code>所包围矩形元素的和。</p><p>已知原数组a中被选中的子矩阵为 以(x1,y1)为左上角，以(x2,y2)为右下角所围成的矩形区域;</p><p>始终要记得，a数组是b数组的前缀和数组，比如对b数组的b[i][j]的修改，会影响到a数组中从a[i][j]及往后的每一个数。</p><p>假定我们已经构造好了b数组，类比一维差分，我们执行以下操作<br>来使被选中的子矩阵中的每个元素的值加上c</p><p>b[x1][y1】 + &#x3D; c ;</p><p>b[x1,][y2+1】- &#x3D; c;</p><p>b[x2+1][y1】- &#x3D; c;</p><p>b[x2+1][y2+1】+ &#x3D; c;</p><p>图片详解：</p><p><a href="https://img-blog.csdnimg.cn/20201217170336254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYyOTI4NQ==,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20201217170336254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYyOTI4NQ==,size_16,color_FFFFFF,t_70</a></p><p>每次对b数组执行以上操作，等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(int i = x1;i &lt;= x2;i++)</span><br><span class="line">  for(int j = y1;j &lt;= y2;j++)</span><br><span class="line">    a[i][j] += c;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2-2；例题"><a href="#2-2-2；例题" class="headerlink" title="2.2.2；例题"></a>2.2.2；例题</h4><p><strong>题目练习： AcWing 798. 差分矩阵</strong><br>输入一个n行m列的整数矩阵，再输入q个操作，每个操作包含五个整数x1, y1, x2, y2, c，其中(x1, y1)和(x2, y2)表示一个子矩阵的左上角坐标和右下角坐标。<br>每个操作都要将选中的子矩阵中的每个元素的值加上c。<br>请你将进行完所有操作后的矩阵输出。<br><strong>输入格式</strong><br>第一行包含整数n, m, q。<br>接下来n行，每行包含m个整数，表示整数矩阵。<br>接下来q行，每行包含5个整数x1, y1, x2, y2, c，表示一个操作。<br><strong>输出格式</strong><br>共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3 4 3</span><br><span class="line">1 2 2 1</span><br><span class="line">3 2 2 1</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 2 2 1</span><br><span class="line">1 3 2 3 2</span><br><span class="line">3 1 3 4 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 3 4 1</span><br><span class="line">4 3 4 1</span><br><span class="line">2 2 2 2</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">static final  int N= 10010;</span><br><span class="line"> static    int[][]arr=new int[N][N];</span><br><span class="line"> static    int[][]b=new int[N][N];</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=new Scanner(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        int n=sc.nextInt();</span><br><span class="line">        int m=sc.nextInt();</span><br><span class="line">        int q=sc.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;=m ; j++) &#123;</span><br><span class="line">                arr[i][j]=sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;=m ; j++) &#123;</span><br><span class="line"></span><br><span class="line">                b[i][j]=arr[i][j]-arr[i-1][j]-arr[i][j-1]+arr[i-1][j-1];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while ((q--)&gt;0)&#123;</span><br><span class="line">            int x1= sc.nextInt();</span><br><span class="line">            int y1= sc.nextInt();</span><br><span class="line">            int x2= sc.nextInt();</span><br><span class="line">            int y2= sc.nextInt();</span><br><span class="line">            int c= sc.nextInt();</span><br><span class="line"></span><br><span class="line">            insert(x1,y1,x2,y2,c);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 1; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j]=b[i][j]+arr[i-1][j]+arr[i][j-1]-arr[i-1][j-1];  //二维前缀和</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;=n ; i++) &#123;</span><br><span class="line"></span><br><span class="line">            for (int j = 1; j &lt;=m ; j++) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.print(arr[i][j]+&quot;  &quot;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void insert(int x1, int y1, int x2, int y2,int c)&#123;</span><br><span class="line">        b[x1][y1]+=c;</span><br><span class="line">        b[x1][y2+1]-=c;</span><br><span class="line">        b[x2+1][y1]-=c;</span><br><span class="line">        b[x2+1][y2+1]+=c;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前缀和与差分&quot;&gt;&lt;a href=&quot;#前缀和与差分&quot; class=&quot;headerlink&quot; title=&quot;前缀和与差分&quot;&gt;&lt;/a&gt;前缀和与差分&lt;/h1&gt;&lt;h2 id=&quot;一，前缀和&quot;&gt;&lt;a href=&quot;#一，前缀和&quot; class=&quot;headerlink&quot; title=&quot;一，前缀和&quot;&gt;&lt;/a&gt;一，前缀和&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前缀和是指某序列的前n项和，可以把它理解为数学上的数列的前n项和，而差分可以看成前缀和的逆运算。合理的使用前缀和与差分，可以将某些复杂的问题简单化。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-一维前缀和&quot;&gt;&lt;a href=&quot;#1-1-一维前缀和&quot; class=&quot;headerlink&quot; title=&quot;1.1 一维前缀和&quot;&gt;&lt;/a&gt;1.1 一维前缀和&lt;/h3&gt;&lt;h4 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot; class=&quot;headerlink&quot; title=&quot;原理：&quot;&gt;&lt;/a&gt;&lt;strong&gt;原理：&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;sum[r] &amp;#x3D; a[1] + a[2] + a[3] + a[l-1] + a[l] + a[l + 1] …… a[r];&lt;br&gt;sum[l - 1] &amp;#x3D; a[1] + a[2] + a[3] + a[l - 1];&lt;br&gt;sum[r] - sum[l - 1] &amp;#x3D; a[l] + a[l + 1] + ……+ a[r];&lt;/p&gt;
&lt;h4 id=&quot;模板：&quot;&gt;&lt;a href=&quot;#模板：&quot; class=&quot;headerlink&quot; title=&quot;模板：&quot;&gt;&lt;/a&gt;模板：&lt;/h4&gt;</summary>
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="前缀和与差分" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"/>
    
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://example.com/posts/1599bffe.html"/>
    <id>http://example.com/posts/1599bffe.html</id>
    <published>2023-09-04T02:16:14.000Z</published>
    <updated>2024-07-17T16:35:13.957Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="归并排序的思想："><a href="#归并排序的思想：" class="headerlink" title="归并排序的思想："></a>归并排序的思想：</h2><p>与快排的思想很相似归并排序也是采用分治的方法，不过归并与快排的顺序是相反的，归并排序需要先划分区间，以mid &#x3D; l + r &gt;&gt; 1, 为中间点划分出两个区间对两个区间进行排序，然后再将这两个有序的区间合并成一个有序的区间。也就是说快排是从大区间一路操作到小区间，而归并是从小区间一路操作到大区间。</p><p>归并排序中最重要、最难的一步是如何合并两个有序的区间。那么这一步也是通过两个指针i,j来实现<br>当我们拥有两个区间[l, mid] ， [mid + 1, r]时，我们让两个指针同时指向两个区间的首端，即i &#x3D; l, j &#x3D; mid + 1。我们每次比较q[i] 与 q[j] 的大小，将最小的取出，取出的方法我们采用另一个数组temp[]储存，设k为存入的个数，则每次取出的操作就是temp[k++] &#x3D; q[i] ( 或q[j]) )。当其中一个指针已经走完整个区间的时候，因为两个区间都是有序的，所以可以直接将另一个区间指针后面的数插入到temp[]后面。</p><span id="more"></span><hr><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><h3 id="c-："><a href="#c-：" class="headerlink" title="c++："></a>c++：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> temp[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mergeSort</span>(q,l,mid),<span class="built_in">mergeSort</span>(q,mid<span class="number">+1</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//把一个分割好的数组分成左右俩个区间，取得中间值当分界点</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line"><span class="comment">// 双指针开始比较哪一个指针指向的数字更小，然后放temp数组里面</span></span><br><span class="line"><span class="keyword">if</span>(q[i]&lt;=q[j]) temp[k++]=q[i++];</span><br><span class="line"><span class="keyword">else</span>    temp[k++]=q[j++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid) temp[k++]=q[i++];</span><br><span class="line"><span class="keyword">while</span>(j&lt;=r)   temp[k++]=q[j++];</span><br><span class="line"><span class="comment">//最后把temp数组里面的数放到q数组里面 </span></span><br><span class="line"><span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++) q[i]=temp[j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) ;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]); </span><br><span class="line"> </span><br><span class="line"><span class="built_in">mergeSort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q[i]); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="java："><a href="#java：" class="headerlink" title="java："></a>java：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;<span class="comment">//如果超出界限</span></span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;<span class="comment">//找到分界点</span></span><br><span class="line">        merge_sort(nums,l,mid);<span class="comment">//开始递归</span></span><br><span class="line">        merge_sort(nums,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="type">int</span>[] temp=<span class="keyword">new</span> <span class="title class_">int</span>[r-l+<span class="number">1</span>];<span class="comment">//合并的那个数组</span></span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;<span class="comment">//合并数组的那个指针</span></span><br><span class="line">        <span class="type">int</span> i=l;<span class="comment">//左数组的i</span></span><br><span class="line">        <span class="type">int</span> j=mid+<span class="number">1</span>;<span class="comment">//右数组的mid+1</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;=nums[j]) temp[k++] = nums[i++];<span class="comment">//合并数组中存放的是最小的</span></span><br><span class="line">            <span class="keyword">else</span>  temp[k++] = nums[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)  temp[k++] = nums[i++];<span class="comment">//左侧小集合还有剩余，依次放入大集合尾部</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=r)  temp[k++] = nums[j++];<span class="comment">//右侧小集合还有剩余，依次放入大集合尾部</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i= l, j = <span class="number">0</span> ; i &lt;= r ; i++ , j++)&#123;<span class="comment">//合并操作 i 从left起</span></span><br><span class="line">            num[i] = temp[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        BufferedReader in=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> n=Integer.parseInt(in.readLine());</span><br><span class="line"></span><br><span class="line">        String[]arr=in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=Integer.parseInt(arr[i]);</span><br><span class="line"></span><br><span class="line">        merge_sort(a,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) System.out.print(a[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;归并排序的思想：&quot;&gt;&lt;a href=&quot;#归并排序的思想：&quot; class=&quot;headerlink&quot; title=&quot;归并排序的思想：&quot;&gt;&lt;/a&gt;归并排序的思想：&lt;/h2&gt;&lt;p&gt;与快排的思想很相似归并排序也是采用分治的方法，不过归并与快排的顺序是相反的，归并排序需要先划分区间，以mid &amp;#x3D; l + r &amp;gt;&amp;gt; 1, 为中间点划分出两个区间对两个区间进行排序，然后再将这两个有序的区间合并成一个有序的区间。也就是说快排是从大区间一路操作到小区间，而归并是从小区间一路操作到大区间。&lt;/p&gt;
&lt;p&gt;归并排序中最重要、最难的一步是如何合并两个有序的区间。那么这一步也是通过两个指针i,j来实现&lt;br&gt;当我们拥有两个区间[l, mid] ， [mid + 1, r]时，我们让两个指针同时指向两个区间的首端，即i &amp;#x3D; l, j &amp;#x3D; mid + 1。我们每次比较q[i] 与 q[j] 的大小，将最小的取出，取出的方法我们采用另一个数组temp[]储存，设k为存入的个数，则每次取出的操作就是temp[k++] &amp;#x3D; q[i] ( 或q[j]) )。当其中一个指针已经走完整个区间的时候，因为两个区间都是有序的，所以可以直接将另一个区间指针后面的数插入到temp[]后面。&lt;/p&gt;</summary>
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="排序" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="归并排序" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://example.com/posts/ff8068c0.html"/>
    <id>http://example.com/posts/ff8068c0.html</id>
    <published>2023-09-03T09:27:22.000Z</published>
    <updated>2024-07-17T16:35:13.974Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="双指针思想"><a href="#双指针思想" class="headerlink" title="双指针思想"></a>双指针思想</h2><p>无需开辟额外的空间<br>有两个指针i，j，分别在最左端和最右端<br>然后i，j两个指针往中间走<br>i往中间走，直到遇到第一个大于x的数，然后停下来（因为大于x的要放在右半边）【遇到小于x的数i就继续往下走】<br>j往中间走，直到遇到第一个小于x的数，然后停下来（小于x的数放在左半边）<br>此时将i所指的数与j指的数交换一下，那么i指的新的数就是小于x的数，j指的新的数就是大于x的数，归位了。<br>接着重复这个过程，i，j往中间走；<br>直到i，j相遇，就可以把区间一分为二【左边小于x,右边大于x】<br>会发现，任何时刻i左边的数都是小于x的，j右边的数都是大于x的<br>当两个指针相遇或是穿过之后，这两个指针左边的数就是大于等于x，右边的数就是大于等于x，完美的分成两个区间</p><p>【x 归位一次，就分好一次区间，不断递归左右两个区间，直到所有的x归位】</p><span id="more"></span><hr><h2 id="快排模板"><a href="#快排模板" class="headerlink" title="快排模板"></a>快排模板</h2><h3 id="c-版本"><a href="#c-版本" class="headerlink" title="c++版本"></a>c++版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ; <span class="comment">// 如果数组一个数都没有或者只有一个数，就不用排序、</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置两个指针，以及分界点x </span></span><br><span class="line"><span class="type">int</span> x = q[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>; <span class="comment">//这里两个指针我们设置在数组外，这样我们可以不管，直接让二者都往里面走</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始循环</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//只有两个指针没有碰到才可以继续走</span></span><br><span class="line"><span class="keyword">do</span> ++i; <span class="keyword">while</span> (q[i] &lt; x); <span class="comment">//当 q[i] &lt; x就继续往下走</span></span><br><span class="line"><span class="keyword">do</span> --j; <span class="keyword">while</span> (q[j] &gt; x); <span class="comment">//当q[j] &gt; x就继续往下走，直到j指针指到一个&lt;=x的数，说明应该放在左边</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断i, j两个指针未碰到就可以交换</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//一次循环结束后，分界点x归位，接着继续分别递归左右两边</span></span><br><span class="line"><span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line"><span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>,&amp;n); <span class="comment">// 输入有几个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>,&amp;q[i]); <span class="comment">// 输入数组 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);<span class="comment">//范围0 - n-1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="java版本"><a href="#java版本" class="headerlink" title="java版本"></a>java版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> l ,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;                  <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l - <span class="number">1</span>;                      <span class="comment">//左边的指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> r + <span class="number">1</span>;                      <span class="comment">//右边的指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[l + ((r - l) &gt;&gt; <span class="number">1</span>)];    <span class="comment">//选取数组中间的那个数作为分界点，把数组分成两部分</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">while</span>(arr[i] &lt; x);             <span class="comment">//在左边大于分界点的数停下</span></span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">while</span>(arr[j] &gt; x);             <span class="comment">//在右边小于分界点的数停下</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;                      <span class="comment">//交换两个数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,l,j);                 <span class="comment">//递归处理左边</span></span><br><span class="line">        quickSort(arr,j+<span class="number">1</span>,r);               <span class="comment">//递归处理右边</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;双指针思想&quot;&gt;&lt;a href=&quot;#双指针思想&quot; class=&quot;headerlink&quot; title=&quot;双指针思想&quot;&gt;&lt;/a&gt;双指针思想&lt;/h2&gt;&lt;p&gt;无需开辟额外的空间&lt;br&gt;有两个指针i，j，分别在最左端和最右端&lt;br&gt;然后i，j两个指针往中间走&lt;br&gt;i往中间走，直到遇到第一个大于x的数，然后停下来（因为大于x的要放在右半边）【遇到小于x的数i就继续往下走】&lt;br&gt;j往中间走，直到遇到第一个小于x的数，然后停下来（小于x的数放在左半边）&lt;br&gt;此时将i所指的数与j指的数交换一下，那么i指的新的数就是小于x的数，j指的新的数就是大于x的数，归位了。&lt;br&gt;接着重复这个过程，i，j往中间走；&lt;br&gt;直到i，j相遇，就可以把区间一分为二【左边小于x,右边大于x】&lt;br&gt;会发现，任何时刻i左边的数都是小于x的，j右边的数都是大于x的&lt;br&gt;当两个指针相遇或是穿过之后，这两个指针左边的数就是大于等于x，右边的数就是大于等于x，完美的分成两个区间&lt;/p&gt;
&lt;p&gt;【x 归位一次，就分好一次区间，不断递归左右两个区间，直到所有的x归位】&lt;/p&gt;</summary>
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="排序" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="快速排序" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>质因子</title>
    <link href="http://example.com/posts/a8a4b497.html"/>
    <id>http://example.com/posts/a8a4b497.html</id>
    <published>2023-08-13T19:28:01.000Z</published>
    <updated>2024-07-17T16:35:13.987Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前缀知识"><a href="#前缀知识" class="headerlink" title="前缀知识"></a>前缀知识</h2><h3 id="算术基本定理"><a href="#算术基本定理" class="headerlink" title="算术基本定理"></a>算术基本定理</h3><p><strong>算术基本定理</strong>，又称为**<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%95%B4%E6%95%B8">正整数</a>的唯一分解定理**，即：每个大于1的<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%84%B6%E6%95%B0">自然数</a>，要么本身就是<a href="https://zh.wikipedia.org/wiki/%E8%B4%A8%E6%95%B0">质数</a>，要么可以写为2个或以上的质数的<a href="https://zh.wikipedia.org/wiki/%E7%A7%AF">积</a>，而且这些质因子按大小排列之后，写法仅有一种方式。</p><p><strong>例如：</strong><br>$$<br>936&#x3D;2^{3} \times 3 \times 17^{2}, 1200&#x3D;2^{4} \times 3 \times 5^{2}, 5207&#x3D;41 \times 127<br>$$</p><h2 id="质因子相关模板："><a href="#质因子相关模板：" class="headerlink" title="质因子相关模板："></a>质因子相关模板：</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">while (sc.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">long n = sc.nextLong();</span><br><span class="line"></span><br><span class="line">int ans = 0;</span><br><span class="line">//任何一个数的质因子大于根号n的要么没有要么只有一个</span><br><span class="line">for (int i = 2; i &lt;= n / i; i++) &#123;</span><br><span class="line"></span><br><span class="line">if (n % i == 0) &#123;</span><br><span class="line">ans++;</span><br><span class="line">//设置系数</span><br><span class="line">int cnt = 0;</span><br><span class="line">while (n % i == 0) &#123;</span><br><span class="line">n /= i;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;质数为&quot; + i + &quot;的幂次系数是&quot; + cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">////任何一个数的质因子大于根号n的要么没有要么只有一个</span><br><span class="line">if (n &gt; 1) &#123;</span><br><span class="line">System.out.println(n + &quot;幂次系数是&quot; + 1);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;质因子种类个数为&quot; + ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="例题一："><a href="#例题一：" class="headerlink" title="例题一："></a>例题一：</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定正整数 <em>n</em>, 请问有多少个质数是 <em>n</em> 的约数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个整数 <em>n</em> 。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数, 表示 <em>n</em> 的质数约数个数。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">396</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>396 有 2,3,11 三个质数约数。</p><h3 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 30% 的评测用例, 1≤n≤10000 。</p><p>对于 60% 的评测用例, 1≤n≤10^9 。</p><p>对于所有评测用例, 1≤n≤10^16。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：10s</li><li>最大运行内存: 512M</li></ul><h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package bisai;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">while (sc.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">long n = sc.nextLong();</span><br><span class="line"></span><br><span class="line">int ans = 0;</span><br><span class="line">//任何一个数的质因子大于根号n的要么没有要么只有一个</span><br><span class="line">for (int i = 2; i &lt;= n / i; i++) &#123;</span><br><span class="line"></span><br><span class="line">if (n % i == 0) &#123;</span><br><span class="line">ans++;</span><br><span class="line">//设置系数</span><br><span class="line">int cnt = 0;</span><br><span class="line">while (n % i == 0) &#123;</span><br><span class="line">n /= i;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">////任何一个数的质因子大于根号n的要么没有要么只有一个</span><br><span class="line">if (n &gt; 1) &#123;</span><br><span class="line"></span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="例题二"><a href="#例题二" class="headerlink" title="例题二:"></a>例题二:</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>任何一个大于 1 的正整数都能被分解为若干个质数相乘, 比如 28&#x3D;2×2×728&#x3D;2×2×7 被分解为了三个质数相乘。请问在区间 [2333333, 23333333] 中有多少个正整数 可以被分解为 12 个质数相乘?</p><h3 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一 个整数, 在提交答案时只填写这个整数, 填写多余的内容将无法得分。</p><h3 id="运行限制-1"><a href="#运行限制-1" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 512M</li></ul><h3 id="程序代码："><a href="#程序代码：" class="headerlink" title="程序代码："></a>程序代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">while (sc.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">long n = sc.nextLong();</span><br><span class="line"></span><br><span class="line">int ans = 0;</span><br><span class="line"></span><br><span class="line">for (int j = 2333333; j &lt; 23333333; j++) &#123;</span><br><span class="line"></span><br><span class="line">int temp = j;</span><br><span class="line">int num = 0;</span><br><span class="line"></span><br><span class="line">for (int i = 2; i &lt;= temp / i; i++) &#123;</span><br><span class="line"></span><br><span class="line">while (temp % i == 0) &#123;</span><br><span class="line">temp /= i;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if (temp &gt; 1)</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">if (num == 12)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前缀知识&quot;&gt;&lt;a href=&quot;#前缀知识&quot; class=&quot;headerlink&quot; title=&quot;前缀知识&quot;&gt;&lt;/a&gt;前缀知识&lt;/h2&gt;&lt;h3 id=&quot;算术基本定理&quot;&gt;&lt;a href=&quot;#算术基本定理&quot; class=&quot;headerlink&quot; title=&quot;算术基本定理&quot;&gt;&lt;/a&gt;算术基本定理&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算术基本定理&lt;/strong&gt;，又称为**&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%95%B4%E6%95%B8&quot;&gt;正整数&lt;/a&gt;的唯一分解定理**，即：每个大于1的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%87%AA%E7%84%B6%E6%95%B0&quot;&gt;自然数&lt;/a&gt;，要么本身就是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B4%A8%E6%95%B0&quot;&gt;质数&lt;/a&gt;，要么可以写为2个或以上的质数的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A7%AF&quot;&gt;积&lt;/a&gt;，而且这些质因子按大小排列之后，写法仅有一种方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;$$&lt;br&gt;936&amp;#x3D;2^{3} &#92;times 3 &#92;times 17^{2}, 1200&amp;#x3D;2^{4} &#92;times 3 &#92;times 5^{2}, 5207&amp;#x3D;41 &#92;times 127&lt;br&gt;$$&lt;/p&gt;
&lt;h2 id=&quot;质因子相关模板：&quot;&gt;&lt;a href=&quot;#质因子相关模板：&quot; class=&quot;headerlink&quot; title=&quot;质因子相关模板：&quot;&gt;&lt;/a&gt;质因子相关模板：&lt;/h2&gt;</summary>
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数论" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="质因子" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/%E8%B4%A8%E5%9B%A0%E5%AD%90/"/>
    
    
  </entry>
  
  <entry>
    <title>等差数列</title>
    <link href="http://example.com/posts/2ab6522f.html"/>
    <id>http://example.com/posts/2ab6522f.html</id>
    <published>2023-08-13T19:19:20.000Z</published>
    <updated>2024-07-17T16:35:13.958Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一 部分的数列，只记得其中 <em>N</em> 个整数。</p><p>现在给出这 <em>N</em> 个整数，小明想知道包含这 <em>N</em> 个整数的最短的等差数列有几项？</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><span id="more"></span><p>输入的第一行包含一个整数 <em>N</em>。</p><p>第二行包含 N 个整数 A1 ,A2 ,··· ,AN 。(注意 A1 ∼ AN 并不一定是按等差数列中的顺序给出)</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 6 4 10 20</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><blockquote><p>样例说明： 包含 2、6、4、10、20 的最短的等差数列是 2、4、6、8、10、12、14、16、 18、20。</p></blockquote><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>(1) 等差数列的求n项的公式：n &#x3D; (an-a1) &#x2F; d + 1;<br>(2) 等差数列的每一项利用公差表达的通式：(下标从1开始)a1,a2,a3…an。<br>a2 - a1 &#x3D; d,<br>a3 - a1 &#x3D; 2d,<br>…<br>an - a1 &#x3D; (n-1)d;<br>所以每一项与第一项的差值都是公差d的倍数。d是差值的公约数！</p><p>我们只需要找出最小的那个最大公约数即可，即为我们的公差</p><p>再利用等差数列前n项和公式计算出对应的答案</p><h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">while (sc.hasNext()) &#123;</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int[] a = new int[n];</span><br><span class="line">for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">a[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(a);</span><br><span class="line">int b = (a[1] - a[0]);</span><br><span class="line"></span><br><span class="line">for (int i = 2; i &lt; n; i++) &#123;</span><br><span class="line">b = gcd(b, a[i] - a[i - 1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (b == 0) &#123;</span><br><span class="line">System.out.println(n);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println((a[n - 1] - a[0]) / b + 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int gcd(int a, int b) &#123;</span><br><span class="line">return b == 0 ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一 部分的数列，只记得其中 &lt;em&gt;N&lt;/em&gt; 个整数。&lt;/p&gt;
&lt;p&gt;现在给出这 &lt;em&gt;N&lt;/em&gt; 个整数，小明想知道包含这 &lt;em&gt;N&lt;/em&gt; 个整数的最短的等差数列有几项？&lt;/p&gt;
&lt;h3 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h3&gt;</summary>
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数论" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="杂题" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/%E6%9D%82%E9%A2%98/"/>
    
    <category term="等差数列" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/%E6%9D%82%E9%A2%98/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>biginteger和bigdecimal的运用(相关题目：棋盘放麦子等)</title>
    <link href="http://example.com/posts/57bc59c8.html"/>
    <id>http://example.com/posts/57bc59c8.html</id>
    <published>2023-08-12T18:59:50.000Z</published>
    <updated>2024-07-17T16:35:13.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一，biginteger"><a href="#一，biginteger" class="headerlink" title="一，biginteger"></a>一，biginteger</h2><p><strong>①</strong>value.Of(参数); 这个函数的作用是将括号内的参数转换成指定的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">•                       int A=42;</span><br><span class="line">•                       BigInteger f=BigInteger.valueOf(A);</span><br><span class="line">•                       System.out.println(&quot;f=&quot;+f); //输出的f将会等于BigInteger型的42</span><br><span class="line">•                        // 答案： f=42</span><br><span class="line"></span><br><span class="line">•                        String s=&quot;12345&quot;;</span><br><span class="line">•                       BigInteger c=BigInteger.valueOf(s);</span><br><span class="line">•           //  则c=12345;※※※需要注意的是不重写的话，jdk1.8 版本是无法支持这种转换的</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>②</strong>add()方法； 这个函数的作用是将<a href="https://so.csdn.net/so/search?q=%E5%A4%A7%E6%95%B4%E6%95%B0&spm=1001.2101.3001.7020">大整数</a>加起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•                       BigInteger c=new BigInteger(&quot;6&quot;);</span><br><span class="line">•                       BigInteger d=new BigInteger(&quot;3&quot;);</span><br><span class="line">•                       System.out.println(&quot;c+d=&quot;+c.add(d));</span><br><span class="line">                        //答案输出： c+d=9</span><br></pre></td></tr></table></figure><p>③subtract()方法，这个函数的作用是将大整数相减，例如以下例子,运用时前者减后者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•                       BigInteger c=new BigInteger(&quot;5&quot;);</span><br><span class="line">•                       BigInteger d=new BigInteger(&quot;3&quot;);</span><br><span class="line">•                       System.out.println(&quot;d-c=&quot;+d.subtract(c));</span><br><span class="line">                        //答案输出： d-c=-2</span><br></pre></td></tr></table></figure><p>④multiply()方法，这个函数的作用是将大整数相乘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•                       BigInteger c=new BigInteger(&quot;6&quot;);</span><br><span class="line">•                       BigInteger d=new BigInteger(&quot;3&quot;);</span><br><span class="line">•                       System.out.println(&quot;c*d=&quot;+c.multiply(d));</span><br><span class="line">                        //答案输出： c*d=18</span><br></pre></td></tr></table></figure><p>⑤divide()方法，这个函数的作用是将大整数做除法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•                       BigInteger c=new BigInteger(&quot;6&quot;);</span><br><span class="line">•                       BigInteger d=new BigInteger(&quot;4&quot;);</span><br><span class="line">•                       System.out.println(&quot;c/d=&quot;+c.divide(d));</span><br><span class="line">                        // 答案输出；c/d=1</span><br></pre></td></tr></table></figure><p>⑥remainder()方法，这个函数的作用是将大整数取余</p><p>⑦pow(exponent)方法，这个函数的作用是将大整数取exponent的指数，例如a.pow(b)&#x3D;&#x3D;a^b;</p><p>⑧gcd()方法，这个函数的作用是将两个大整数取最大公约数，例如a.gcd(b)；</p><p>⑨abs()方法，这个函数的作用是取绝对值，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">•                       BigInteger c=new BigInteger(&quot;-9&quot;);</span><br><span class="line">•                       System.out.println(c.abs());</span><br><span class="line">                        //答案输出: 9</span><br></pre></td></tr></table></figure><p>⑩negate()方法，这个函数的作用是取数的相反数，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">•                       BigInteger c=new BigInteger(&quot;9&quot;);</span><br><span class="line">•                       System.out.println(c.negate());</span><br><span class="line">                        // 答案输出: -9</span><br></pre></td></tr></table></figure><p>⑪mod()方法; 这个函数的作用是对数进行取余 a.mod(b)&#x3D;a%b&#x3D;a.remainder(b);</p><p>⑫max()方法，min()方法，分别是比较两个数的大小，例如a.max(b); 取a,b中的最大值</p><p>⑬compareTo()方法这个方法是用来比较两个大整数大小的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">• public void testCompare() &#123;</span><br><span class="line">•   BigInteger bigNum1 = new BigInteger(&quot;52&quot;);</span><br><span class="line">•   BigInteger bigNum2 = new BigInteger(&quot;27&quot;);</span><br><span class="line">​</span><br><span class="line">•   //1.compareTo()：返回一个int型数据（1 大于； 0 等于； -1 小于）</span><br><span class="line">•   int num = bigNum1.compareTo(bigNum2);           //1</span><br><span class="line">​</span><br><span class="line">•   //2.max()：直接返回大的那个数，类型为BigInteger</span><br><span class="line">•   //  原理：return (compareTo(val) &gt; 0 ? this : val);</span><br><span class="line">•   BigInteger compareMax = bigNum1.max(bigNum2);   //52</span><br><span class="line">​</span><br><span class="line">•   //3.min()：直接返回小的那个数，类型为BigInteger</span><br><span class="line">•   //  原理：return (compareTo(val) &lt; 0 ? this : val);</span><br><span class="line">•   BigInteger compareMin = bigNum1.min(bigNum2);   //27</span><br><span class="line">•&#125;</span><br></pre></td></tr></table></figure><p>⑭equals()方法，判断两个大整数是否相等，例如c.equals(d) 相等就返回 true;</p><h3 id="BigInteger一些基本类型的转换"><a href="#BigInteger一些基本类型的转换" class="headerlink" title="BigInteger一些基本类型的转换:"></a>BigInteger一些基本类型的转换:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void testToAnother() &#123;</span><br><span class="line">    BigInteger bigNum = new BigInteger(&quot;38&quot;);</span><br><span class="line">    int radix = 2;</span><br><span class="line">    </span><br><span class="line">    //1.转换为bigNum的二进制补码形式</span><br><span class="line">    byte[] num1 = bigNum.toByteArray();</span><br><span class="line">    //2.转换为bigNum的十进制字符串形式</span><br><span class="line">    String num2 = bigNum.toString();        //38</span><br><span class="line">    //3.转换为bigNum的radix进制字符串形式</span><br><span class="line">    String num3 = bigNum.toString(radix);   //100110</span><br><span class="line">    //4.将bigNum转换为int</span><br><span class="line">    int num4 = bigNum.intValue();</span><br><span class="line">    //5.将bigNum转换为long</span><br><span class="line">    long num5 = bigNum.longValue();</span><br><span class="line">    //6.将bigNum转换为float</span><br><span class="line">    float num6 = bigNum.floatValue();</span><br><span class="line">    //7.将bigNum转换为double</span><br><span class="line">    double num7 = bigNum.doubleValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二，BigDecimal"><a href="#二，BigDecimal" class="headerlink" title="二，BigDecimal"></a>二，BigDecimal</h2><p>用来对超过16位有效位的数进行精确的运算。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//int,string转BigDecimal</span><br><span class="line">BigDecimal a = new BigDecimal(10);</span><br><span class="line">//long,float,double转BigDecimal</span><br><span class="line">BigDecimal b = BigDecimal.valueOf(5.55);</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//加法</span><br><span class="line">BigDecimal c = a.add(b);</span><br><span class="line">//减法</span><br><span class="line">c = a.subtract(b);</span><br><span class="line">//乘法</span><br><span class="line">c = a.multiply(b);</span><br><span class="line">c = a.multiply(b).setScale(4,BigDecimal.ROUND_HALF_UP);</span><br><span class="line">//除法</span><br><span class="line">c = a.divide(b, 2, RoundingMode.HALF_UP);</span><br><span class="line">//求余数</span><br><span class="line">c = a.remainder(b);</span><br><span class="line">//最小值</span><br><span class="line">c = a.min(b);</span><br><span class="line">//最大值</span><br><span class="line">c = a.max(b);</span><br><span class="line">//绝对值</span><br><span class="line">c = a.abs();</span><br><span class="line">//相反数</span><br><span class="line">c = a.negate();</span><br><span class="line">//去除多余的0</span><br><span class="line">a.stripTrailingZeros();</span><br><span class="line">//去除多余的0, 并转为字符串</span><br><span class="line">//不能使用toString(), 会返回科学计数法</span><br><span class="line">String a_string = a.stripTrailingZeros().toPlainString();</span><br><span class="line">//返回此BigDecimal的正负, -1为负, 0为0 , 1为正</span><br><span class="line">int a_int = a.signum();</span><br><span class="line">//比较大小, -1为a&lt;b, 0为a=b , 1为a&gt;b</span><br><span class="line">a_int = a.compareTo(b);</span><br><span class="line"></span><br><span class="line">//BigDecimal转其他类型</span><br><span class="line">String b_string = b.toString();</span><br><span class="line">int b_int = b.intValue();</span><br><span class="line">long b_long = b.longValue();</span><br><span class="line">float b_float = b.floatValue();</span><br><span class="line">double b_double = b.doubleValue();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="精度设置"><a href="#精度设置" class="headerlink" title="精度设置"></a>精度设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.setScale(4,BigDecimal.ROUND_HALF_UP);</span><br></pre></td></tr></table></figure><ol><li><p>BigDecimal.ROUND_UP<br>远离零的舍入模式</p></li><li><p>BigDecimal.ROUND_DOWN<br>接近零的舍入模式</p></li><li><p>BigDecimal.ROUND_CEILING<br>接近正无穷大的舍入模式</p></li><li><p>BigDecimal.ROUND_FLOOR<br>接近负无穷大的舍入模式</p></li><li><p>BigDecimal.ROUND_HALF_UP<br>向最近的一边数字舍入, 四舍五入<br>这个是最常用的</p></li><li><p>BigDecimal.ROUND_HALF_DOWN<br>向最近的一边数字舍入, 五舍六入</p></li><li><p>BigDecimal.ROUND_HALF_EVEN<br>向最近的一边数字舍入，四舍六入. 为五时，如果最近的一边数字是奇数，入，如果是偶数，舍</p></li><li><p>BigDecimal.ROUND_UNNECESSARY<br>计算结果是精确的，不需要舍入<br>结果不精确会抛出异常ArithmeticException</p></li></ol><hr><h2 id="三-题目"><a href="#三-题目" class="headerlink" title="三,题目"></a>三,题目</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>你一定听说过这个故事。国王对发明国际象棋的大臣很佩服，问他要什么报酬，大臣说：请在第 11 个棋盘格放 11 粒麦子，在第 22 个棋盘格放 22 粒麦子，在第 33 个棋盘格放 44 粒麦子，在第 44 个棋盘格放 88 粒麦子，……后一格的数字是前一格的两倍，直到放完所有棋盘格（国际象棋共有 6464 格）。</p><p>国王以为他只是想要一袋麦子而已，哈哈大笑。</p><p>当时的条件下无法准确计算，但估算结果令人吃惊：即使全世界都铺满麦子也不够用！</p><p>请你借助计算机准确地计算，到底需要多少粒麦子。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">int n = 1;</span><br><span class="line">int count = 1;</span><br><span class="line">BigInteger a = BigInteger.valueOf(n);</span><br><span class="line">BigInteger b = BigInteger.valueOf(2);</span><br><span class="line">BigInteger sum = BigInteger.valueOf(1);</span><br><span class="line">//这样说明初始化第一个格子已经放了</span><br><span class="line">while (count &lt; 64) &#123;</span><br><span class="line">a = a.multiply(b);</span><br><span class="line">sum = sum.add(a);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一，biginteger&quot;&gt;&lt;a href=&quot;#一，biginteger&quot; class=&quot;headerlink&quot; title=&quot;一，biginteger&quot;&gt;&lt;/a&gt;一，biginteger&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;①&lt;/strong&gt;value.Of(参数); 这个函数的作用是将括号内的参数转换成指定的数据类型&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;•                       int A=42;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;•                       BigInteger f=BigInteger.valueOf(A);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;•                       System.out.println(&amp;quot;f=&amp;quot;+f); //输出的f将会等于BigInteger型的42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;•                        // 答案： f=42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;•                        String s=&amp;quot;12345&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;•                       BigInteger c=BigInteger.valueOf(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;•           //  则c=12345;※※※需要注意的是不重写的话，jdk1.8 版本是无法支持这种转换的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数论" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="biginteger和bigdecimal常用api" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/biginteger%E5%92%8Cbigdecimal%E5%B8%B8%E7%94%A8api/"/>
    
    
  </entry>
  
  <entry>
    <title>找质数</title>
    <link href="http://example.com/posts/6eac21d3.html"/>
    <id>http://example.com/posts/6eac21d3.html</id>
    <published>2023-08-12T18:25:39.000Z</published>
    <updated>2024-07-17T16:35:13.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="质数-只有1和本身两个约数的数"><a href="#质数-只有1和本身两个约数的数" class="headerlink" title="质数: 只有1和本身两个约数的数"></a>质数: <strong>只有1和本身两个约数的数</strong></h2><p><strong>（埃氏筛法就不写了，直接上欧拉筛 ，yyds！！）</strong></p><h2 id="方法一：暴力大法"><a href="#方法一：暴力大法" class="headerlink" title="方法一：暴力大法"></a>方法一：暴力大法</h2><p>​    <strong>每一个整数都可以看做由两个数相乘得到，且每个乘数不大于原整数的平方根（可以减少相应的时间复杂度），本质还是暴力</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class PrimeCheck &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">while(sc.hasNext()) &#123;</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">System.out.println(isPrime(n)?&quot;yes&quot;:&quot;no&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isPrime(int n) &#123;</span><br><span class="line">if(n&lt;=1) return true;</span><br><span class="line">for(int i=2;i&lt;=n/i;i++) if(n%i==0) return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="方法二：欧拉筛（线性筛）"><a href="#方法二：欧拉筛（线性筛）" class="headerlink" title="方法二：欧拉筛（线性筛）"></a>方法二：欧拉筛（线性筛）</h2><p><strong>核心思路 ：每个合数只被其最小的素因子筛一次，大大减少了时间复杂度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int[] prim = new int[n];</span><br><span class="line">boolean[] isp = new boolean[n];</span><br><span class="line">//质数为false，合数为true</span><br><span class="line">int count = 0;</span><br><span class="line">//i是boolean数组的指针</span><br><span class="line">//j是prim数组的指针</span><br><span class="line">for (int i = 2; i &lt; isp.length; i++) &#123;</span><br><span class="line">if (isp[i] == false)</span><br><span class="line">prim[count++] = i;</span><br><span class="line">for (int j = 0; j &lt; count &amp;&amp; i * prim[j] &lt; n; j++) &#123;</span><br><span class="line">//保证素数的倍数不超过打表区间</span><br><span class="line">isp[i * prim[j]] = true;</span><br><span class="line">//质数的倍数一定是合数</span><br><span class="line">if (i % prim[j] == 0)</span><br><span class="line">break;</span><br><span class="line">//欧拉筛的核心  每个合数只被其最小的素因子筛一次</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">if (prim[i] != 0)</span><br><span class="line">System.out.print(prim[i] + &quot;  &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数论" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="质数" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/%E8%B4%A8%E6%95%B0/"/>
    
    <category term="质数筛" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/%E8%B4%A8%E6%95%B0/%E8%B4%A8%E6%95%B0%E7%AD%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>字符串模拟整数的加法和乘法</title>
    <link href="http://example.com/posts/3e54ee78.html"/>
    <id>http://example.com/posts/3e54ee78.html</id>
    <published>2023-07-31T17:38:26.000Z</published>
    <updated>2024-07-17T16:35:13.984Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大整数相加与相乘（字符串模拟）"><a href="#大整数相加与相乘（字符串模拟）" class="headerlink" title="大整数相加与相乘（字符串模拟）"></a>大整数相加与相乘（字符串模拟）</h1><hr><h2 id="一、大整数相加模拟"><a href="#一、大整数相加模拟" class="headerlink" title="一、大整数相加模拟"></a>一、大整数相加模拟</h2><h3 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h3><span id="more"></span><p><strong>①将两个整数翻转</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">个位十位百位千位</span><br><span class="line">a6  5   41</span><br><span class="line">b9  8    70</span><br></pre></td></tr></table></figure><p>说白了这就是翻转字符串</p><p><strong>②相加计算，逢十进一</strong></p><p><strong>③反向输出</strong></p><p>2245</p><p><strong>程序代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package suafna;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">while (sc.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">String a = sc.next();</span><br><span class="line">String b = sc.next();</span><br><span class="line">int len = a.length() &gt; b.length() ? a.length() : b.length();</span><br><span class="line"></span><br><span class="line">a = new StringBuffer(a).reverse().toString();</span><br><span class="line">b = new StringBuffer(b).reverse().toString();</span><br><span class="line">//      设置保存结果的容器</span><br><span class="line">String ans = &quot;&quot;;</span><br><span class="line">//设置保存当前位数的下一位的进位的容器</span><br><span class="line">int jinwei = 0;</span><br><span class="line">for (int i = 0; i &lt;= len; i++) &#123;</span><br><span class="line">//这里为啥要保留第len次循环呢？这是为了防止出现极端情况</span><br><span class="line">//！！！！例如99+1时如果不进行第三位的进位运算会出现第一位被删除的现象，例如这个题会显示 00而不是100</span><br><span class="line">int num1 = i &lt; a.length() ? a.charAt(i) - &#x27;0&#x27; : 0;</span><br><span class="line">int num2 = i &lt; b.length() ? b.charAt(i) - &#x27;0&#x27; : 0;</span><br><span class="line">int sum = num1 + num2 + jinwei;</span><br><span class="line">//！！！这里为啥要加if条件呢，这是为了防止出现1+3=04的情况</span><br><span class="line">if (sum != 0) &#123;</span><br><span class="line">jinwei = 0;</span><br><span class="line">//置零操作，防止上一轮循环的进位数对本轮造成影响</span><br><span class="line">if (sum &gt;= 10) &#123;</span><br><span class="line">//如果本位数大于10 就进一位</span><br><span class="line">jinwei++;</span><br><span class="line">//取相加后本位小于10的数 因为已经进了一位</span><br><span class="line">sum %= 10;</span><br><span class="line">&#125;</span><br><span class="line">//不管是否进位都会进行拼接操作，所以要放在if外面，</span><br><span class="line">ans = sum + ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、大整数相乘模拟"><a href="#二、大整数相乘模拟" class="headerlink" title="二、大整数相乘模拟"></a>二、大整数相乘模拟</h2><h3 id="思路分析：-1"><a href="#思路分析：-1" class="headerlink" title="思路分析："></a>思路分析：</h3><p><strong>①将两个整数翻转</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">个位十位</span><br><span class="line">a 7 1</span><br><span class="line">b 5 2</span><br></pre></td></tr></table></figure><p><strong>②相乘计算</strong><br>$$<br>\begin{array}{l}a_{0} * b_{0}&#x3D;7 * 5&#x3D;35 \ a_{0} * b_{1}&#x3D;7 * 2&#x3D;14 \ a_{1} * b_{0}&#x3D;1 * 5&#x3D;5 \ a_{1} * b_{1}&#x3D;1 * 2&#x3D;2\end{array}<br>$$<br><strong>③结果存入c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">c0                            c1                          c2</span><br><span class="line"></span><br><span class="line">35                            14+5                        2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  17</span><br><span class="line">*</span><br><span class="line">  25</span><br><span class="line"> ----- </span><br><span class="line">  5  35                     每个位数就对应的是c数组  c0表示最开头的一位，c1表示第二位，c3表示第一位</span><br><span class="line">2 14                        那么对应的状态转移方程（仅仅只是感觉和一维dp有点相似，不知道是不是啊喂）</span><br><span class="line">                            就是c[i+j]=c[i+j]+ai*bj   （对应就是c[1]=5+2*7）</span><br><span class="line">                            （ai和bj相当于a的第i位数字*b的第j位数字）此时只是个半成品数组还需要吧每                             个数组位置上的数变成个位数</span><br><span class="line">-------</span><br><span class="line">c0 c1 c2</span><br><span class="line"></span><br><span class="line">             </span><br></pre></td></tr></table></figure><p><strong>④进位计算反向输出</strong></p><p>如果c[i]是俩位数，十位的数字附加到c[i+1] 完成初始化之后再倒序遍历即可</p><h3 id="程序代码："><a href="#程序代码：" class="headerlink" title="程序代码："></a>程序代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package suafna;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">while (sc.hasNext()) &#123;</span><br><span class="line">String a = sc.next();</span><br><span class="line">String b = sc.next();</span><br><span class="line">//翻转字符串</span><br><span class="line">a = new StringBuffer(a).reverse().toString();</span><br><span class="line">b = new StringBuffer(b).reverse().toString();</span><br><span class="line"></span><br><span class="line">int[] c = new int[a.length() + b.length()];</span><br><span class="line">//开始构建模拟乘法的数组了c1，c2，.....</span><br><span class="line">for (int i = 0; i &lt; a.length(); i++) &#123;</span><br><span class="line">//ai为其中一个乘数某一位的数值</span><br><span class="line">int ai = a.charAt(i) - &#x27;0&#x27;;</span><br><span class="line">for (int j = 0; j &lt; b.length(); j++) &#123;</span><br><span class="line">int bj = b.charAt(j) - &#x27;0&#x27;;</span><br><span class="line">//bj为其中一个乘数某一位的数值</span><br><span class="line">//</span><br><span class="line">//这一步详细看上面思路，模拟乘法的一个方案</span><br><span class="line">c[i + j] += ai * bj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//对半成品数组进行一个进位操作</span><br><span class="line">for (int i = 0; i &lt; c.length - 1; i++) &#123;</span><br><span class="line">int jinwei = c[i] / 10;</span><br><span class="line">c[i] = c[i] % 10;</span><br><span class="line">c[i + 1] += jinwei;</span><br><span class="line">&#125;</span><br><span class="line">//倒着打印表，值得学习这种写法</span><br><span class="line">int pos = c.length;</span><br><span class="line">//定义pos指针</span><br><span class="line">//找到啥时候开始不是0的，也就是说最高的一位绝不可能是0</span><br><span class="line">while (c[--pos] == 0)</span><br><span class="line">;</span><br><span class="line">while (pos &gt;= 0)</span><br><span class="line">System.out.print(c[pos--]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;大整数相加与相乘（字符串模拟）&quot;&gt;&lt;a href=&quot;#大整数相加与相乘（字符串模拟）&quot; class=&quot;headerlink&quot; title=&quot;大整数相加与相乘（字符串模拟）&quot;&gt;&lt;/a&gt;大整数相加与相乘（字符串模拟）&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、大整数相加模拟&quot;&gt;&lt;a href=&quot;#一、大整数相加模拟&quot; class=&quot;headerlink&quot; title=&quot;一、大整数相加模拟&quot;&gt;&lt;/a&gt;一、大整数相加模拟&lt;/h2&gt;&lt;h3 id=&quot;思路分析：&quot;&gt;&lt;a href=&quot;#思路分析：&quot; class=&quot;headerlink&quot; title=&quot;思路分析：&quot;&gt;&lt;/a&gt;思路分析：&lt;/h3&gt;</summary>
    
    
    
    <category term="竞赛算法和数据结构" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数论" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="字符串模拟大整数的加法和乘法" scheme="http://example.com/categories/%E7%AB%9E%E8%B5%9B%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%8B%9F%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9A%84%E5%8A%A0%E6%B3%95%E5%92%8C%E4%B9%98%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
